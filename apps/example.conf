types {
    switch { type = enum, labels = [On, Off] }

    trigger { type = action, arg = none, ret = none}
    set_bool { type = action, arg = bool } // note that ret blank is implied

    heartbeat { type = action, pretty = "Heartbeat", desc = "Pings the device" }
}

root {
    version = 2

    foo : int8

    ams {
        schema = board/ams
        version = 1
        pretty = “Accumulator Management System”

        hello : int8

        dcdc_status : ${types.switch}
        state { type = enum, labels = [Normal, Error, Bootloader] }

        foo { type = bool }
        bar : uint8

        heartbeat : ${types.heartbeat}
    }

    // notice that the bridge is a node too!
    // this way we can support stream connections without
    // any changes on the gui
    bridge {
        type = group
        schema = bridge
        version = 1

        recording_state : ${types.set_bool}

        // use the empty type 
        restart = ${types.trigger}
    }
}

configs {
    ams {
        platform = "stm32"
        parameters { 
            // All platform specific information needed for codegen goes here
            // will generate code for each interface
            interfaces {
                // one can connection which listens for all non-ams variables
                // and dumps all ams changes to the bus

                general_can { type = can, baud = 50000,

                    // will listen on the general can for everything except for ams
                    // updates, which will be published to the general can
                    pubish : [ /ams ]
                    // automatically excludes the exports, but we can manualy exclude /ams anyways
                    // this will be useful if we have multiple interfaces
                    listen : [ /, -/ams ]  
                }
            }
        }
        // determines what can be "seen" in this context
        permissions {
            read=[
                /pcm/flags
            ]
            write=[
                /pcm/ams_ready
                /
            ]
            own=[
                /ams
            ]
        }
    }
}

