syntax = "proto3";

import "common.proto";

package telegraph.api;

// to be converted to json
// for both the javascript/c++ server/client code

message ParamsEntry {
    string key = 1;
    Params value = 2;
}

message ParamsMap {
    repeated ParamsEntry entries = 1;
}

message ParamsList {
    repeated Params elements = 1;
}

// json-like structure, as a protobuffer
// if all are unset, equivalent to null
message Params {
    oneof content {
        bool b = 1;
        float number = 2;
        string str = 3;
        ParamsMap object = 4;
        ParamsList array = 5;
        Node tree = 6;
        string ctx_uuid = 7;
        string comp_uuid = 8;
        Empty none = 9;
    }
}

message Context {
    string uuid = 1;
    string name = 2;
    string type = 3;
    Params params = 4;
}

message Component {
    string uuid = 1;
    string name = 2;
    string type = 3;
    Params params = 4;
}

message Mount {
    string src = 1; 
    string tgt = 2; 
}

message SourceEntry {
    string key = 1;
    oneof tree {
        string context = 3; // context uuid
        Node root = 4;
    }
}

// creation options
message Create {
    string name = 1;
    string type = 2;
    Params params = 3;
}

message Stream {
    string uuid = 1;
    Params params = 2;
}

message Namespace {
    repeated Context contexts = 2;
    repeated Component components = 3;
    repeated Mount mounts = 4;
}

// tree operations

message Subscription {
    string uuid = 1; // context uuid
    repeated string variable = 2;
    float debounce = 3;
    float refresh = 4;
    float timeout = 5;
}

message Call {
    string uuid = 1; // context uuid
    repeated string action = 2; // path to action, specified the children indices
    Value value = 3;
    float timeout = 4;
}

message DataWrite {
    string uuid = 1; // context uuid
    repeated string path = 2;
    repeated Datapoint data = 3;
}

message DataQuery {
    string uuid = 1;
    repeated string path = 2;
}

message DataPacket {
    repeated Datapoint data = 1;
}

message Packet {
    sint32 req_id = 1;
    oneof payload {
        float cancel = 2; // timeout for sub cancel response from board, ignored for queries
        string error = 3;
        bool success = 4;

        // every server/client can only have a
        // single associated namespace uuid that cannot change
        // this can also be used as a heartbeat packet since it has no sideaffects
        Empty query_ns = 5;
        Namespace ns = 6;

        Context context_added = 7;
        string context_removed = 8; // uuid of removed context

        Component component_added = 9;
        string component_removed = 10;

        Mount mount_added = 11;
        Mount mount_removed = 12;

        Mount mount = 13;
        Mount unmount = 14;

        Create create_context = 15;
        Create create_component = 16;
        string context_created = 17; // uuid of created context
        string component_created = 18; // uuid of created component 

        string destroy_context = 19;
        string destroy_component = 20;

        Stream stream_component = 23;
        Stream stream_context = 24;
        Params stream_update = 25;

        // tree operations:
        string fetch_tree = 26; // context uuid to fetch tree
        Node fetched_tree = 27; // response to a context fetch

        Subscription sub_change = 28;
        Empty sub_poll = 29;
        Empty sub_reset = 30;
        Type sub_type = 31;
        Value sub_update = 32; // keep receiving until the original request id is cancelled

        Call call_action = 33;
        Value call_return = 34;

        // archive operations:
        DataWrite data_write = 35;

        DataQuery data_query = 36;
        DataPacket archive_data = 37; // initial response to a query
        DataPacket archive_update = 38; // any archive updates
    }
}