syntax = "proto3";

import "common.proto";

package telegraph.api;

// to be converted to json
// for both the javascript/c++ server/client code

message ParamsEntry {
    string key = 1;
    Params value = 2;
}

message ParamsMap {
    repeated ParamsEntry entries = 1;
}

message ParamsList {
    repeated Params elements = 1;
}

// json-like structure, as a protobuffer
// if all are unset, equivalent to null
message Params {
    oneof content {
        float number = 1;
        string str = 2;
        ParamsMap object = 3;
        ParamsList array = 4;
        Empty none = 5;
    }
}

message Context {
    string uuid = 1;
    string name = 2;
    string type = 3;
    Params params = 4;
}

message Task {
    string uuid = 1;
    string name = 2;
    string type = 3;
    Params params = 4;
}

message Mount {
    string src = 1; 
    string tgt = 2; 
}

// querying
message MountsQuery {
    string srcs_of = 2;
    string tgts_of = 3;
}

message ContextsQuery {
    // will include any that match either of these
    // and all if both unset
    string uuid = 1;
    string name = 2;
    string type = 3;
}

message TasksQuery {
    // restrictive filters
    string uuid = 1;
    string name = 2;
    string type = 3;
}

message MountList { repeated Mount mounts = 1; }
message TaskList { repeated Task tasks = 1; }
message ContextList { repeated Context contexts = 1; }

message SourceEntry {
    string key = 1;
    oneof tree {
        string context = 3; // context uuid
        Node root = 4;
    }
}

// creation options
message Create {
    string name = 1;
    string type = 2;
    Params params = 3;
    repeated SourceEntry sources = 4;
}

message QueryTask {
    string uuid = 1;
    Params params = 2;
}

// tree operations

message Subscription {
    string uuid = 1; // context uuid
    repeated string variable = 2;
    float min_interval = 3;
    float max_interval = 4;
    float timeout = 5;
}

message Call {
    string uuid = 1; // context uuid
    repeated string action = 2; // path to action, specified the children indices
    Value value = 3;
    float timeout = 4;
}

message DataWrite {
    string uuid = 1; // context uuid
    repeated string path = 2;
    repeated Datapoint data = 3;
}

message DataQuery {
    string uuid = 1;
    repeated string path = 2;
}

message DataPacket {
    repeated Datapoint data = 1;
}

message Packet {
    sint32 req_id = 1;
    oneof payload {
        float cancel = 2; // timeout for sub cancel response from board, ignored for queries
        string error = 3;
        bool success = 4;

        // every server/client can only have a
        // single associated namespace uuid that cannot change
        // this can also be used as a heartbeat packet since it has no sideaffects
        Empty query_ns = 5;
        string ns_uuid = 6;

        // tree operations:

        string fetch_tree = 7; // context uuid to fetch tree
        Node fetched_tree = 8; // response to a context fetch

        Subscription change_sub = 9;
        Type sub_type = 10;
        Value variable_update = 11; // keep receiving until the original request id is cancelled

        Call call_action = 12;
        Value call_return = 13;

        // archive operations:
        DataWrite data_write = 14;

        DataQuery data_query = 15;
        DataPacket archive_data = 16; // initial response to a query
        DataPacket archive_update = 17; // any archive updates

        // context queries:
        ContextsQuery contexts_query = 18;

        ContextList context_list = 19;
        Context context_added = 20;
        string context_removed = 21; // uuid of removed context

        // mount queries:
        MountsQuery mounts_query = 22; // queries mounts in foreign namespace, 
                                       // but returned mounts can be cross-namespace
                                       // (returns all with src or tgt in foreign namespace)
        MountList mount_list = 23;
        Mount mount_added = 24;
        Mount mount_removed = 25;

        // task queries:
        TasksQuery tasks_query = 26; // find out what io tasks are running in the foreign namespace
        TaskList task_list = 27;
        Task task_added = 28;
        string task_removed = 29; // task uuid

        // create/destroy contexts/tasks/mounts

        Create create_context = 30;
        Create create_task = 31;
        string context_created = 32; // uuid of created context
        string task_created = 33; // uuid of created task

        string destroy_context = 34;
        string destroy_task = 35;

        // task-related queries
        string start_task = 36;
        string stop_task = 37;

        QueryTask query_task = 38;
        Params task_update = 39;

        Mount mount = 40;
        Mount unmount = 41;
    }
}
