types {
    switch { type = enum, type_name = "switch", labels = [On, Off] }

    trigger { type = action, arg = none, ret = none}
    set_bool { type = action, arg = bool } // note that ret blank is implied

    heartbeat { type = action, pretty = "Heartbeat", desc = "Pings the device" }
}

root {
    version = 2

    foo : int8

    ams {
        schema = board/ams
        version = 1
        pretty = “Accumulator Management System”

        hello : int8

        dcdc_status : ${types.switch}
        state { type = enum, type_name = "ams_state", labels = [Normal, Error, Bootloader] }

        foo { type = bool }
        bar : uint8

        heartbeat : ${types.heartbeat}
    }

    // notice that the bridge is a node too!
    // this way we can support stream connections without
    // any changes on the gui
    bridge {
        type = group
        schema = bridge
        version = 1

        recording_state : ${types.set_bool}

        // use the empty type 
        restart = ${types.trigger}
    }
}

configs {
    ams {
        exports {
            includes = [/ams]
        }
        general_can {
            includes = [/]
            excludes = [/ams]
        }
    }
}
