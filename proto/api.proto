syntax = "proto3";

import "proto/common.proto";

package telegraph.proto;

// Represents a context
service ContextManager {
  // First returns deltas populating all available contexts
  // then will send subsequent deltas if contexts get removed
  rpc StreamContexts(Empty) returns (stream ContextDelta) {}

  // Will first send all of the deltas needed to build up
  // a tree for a context
  rpc StreamTree(TreeRequest) returns (stream TreeDelta) {}

  // canceling the stream stops the subscription
  rpc Subscribe(SubscribeRequest) returns (stream DataPoint) {}

  // performs an action
  rpc PerformAction(ActionRequest) returns (Value) {}
}

enum DeltaType {
    ADDED = 0;
    REMOVED = 1;

    INITIAL = 2; // when initial types get sent over all are marked with initial
    INITIALIZED = 3; // the last initial type gets the final delta type
}

// ContextInfo contains all the information
// about a specific context.
message ContextInfo {
  int32 id = 1;
  string name = 2;
}

// You get context delta events 
// for when contexts have been added/removed
message ContextDelta {
    DeltaType type = 1;
    ContextInfo context = 2;
}

// Request the tree 
// for a specific context ID
message TreeRequest {
    int32 tree_id = 1;
}

message TreeDelta {
    DeltaType type = 1;
    Node node = 2;
}

// subscribe to a particular variable
message SubscribeRequest {
    int32 var_id = 1;
    int32 min_interval = 2;
    int64 max_interval = 3;
}

// for performing an action
message ActionRequest {
    int32 action_id = 2;
    Value argument = 3;
}

// Represents a datapoint
message DataPoint {
    uint64 timestamp = 1;
    Value value = 2;
}
