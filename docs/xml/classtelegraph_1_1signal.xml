<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtelegraph_1_1signal" kind="class" language="C++" prot="public">
    <compoundname>telegraph::signal</compoundname>
    <includes refid="signal_8hpp" local="no">signal.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtelegraph_1_1signal_1aeb39b6e846fba597d37069a3d123e48d" prot="private" static="no" mutable="no">
        <type>std::map&lt; void *, std::function&lt; void(T...)&gt; &gt;</type>
        <definition>std::map&lt;void*, std::function&lt;void(T...)&gt; &gt; telegraph::signal&lt; T &gt;::listeners_</definition>
        <argsstring></argsstring>
        <name>listeners_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/utils/signal.hpp" line="45" column="1" bodyfile="lib/telegraph/utils/signal.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtelegraph_1_1signal_1abfa259e5f14f41325eff136e3d3ae1f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>telegraph::signal&lt; T &gt;::signal</definition>
        <argsstring>()</argsstring>
        <name>signal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/utils/signal.hpp" line="12" column="1" bodyfile="lib/telegraph/utils/signal.hpp" bodystart="12" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1signal_1a849fca4479774ba132dd72d245bd50f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtelegraph_1_1signal" kindref="compound">signal</ref>&lt; T... &gt; &amp;</type>
        <definition>signal&lt;T...&gt;&amp; telegraph::signal&lt; T &gt;::add</definition>
        <argsstring>(const std::function&lt; void(T...)&gt; &amp;cb)</argsstring>
        <name>add</name>
        <param>
          <type>const std::function&lt; void(T...)&gt; &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/utils/signal.hpp" line="13" column="1" bodyfile="lib/telegraph/utils/signal.hpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1signal_1aa1b6aaaccd54b00fb351677351084af3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtelegraph_1_1signal" kindref="compound">signal</ref>&lt; T... &gt; &amp;</type>
        <definition>signal&lt;T...&gt;&amp; telegraph::signal&lt; T &gt;::add</definition>
        <argsstring>(void *ptr, const std::function&lt; void(T...)&gt; &amp;cb)</argsstring>
        <name>add</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const std::function&lt; void(T...)&gt; &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If you use this, the lambda will have to be removed using ptr </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/utils/signal.hpp" line="20" column="1" bodyfile="lib/telegraph/utils/signal.hpp" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1signal_1a2adad7eecd9f66137706625a08441968" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtelegraph_1_1signal" kindref="compound">signal</ref>&lt; T... &gt; &amp;</type>
        <definition>signal&lt;T...&gt;&amp; telegraph::signal&lt; T &gt;::remove</definition>
        <argsstring>(const std::function&lt; void(T...)&gt; &amp;cb)</argsstring>
        <name>remove</name>
        <param>
          <type>const std::function&lt; void(T...)&gt; &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/utils/signal.hpp" line="25" column="1" bodyfile="lib/telegraph/utils/signal.hpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1signal_1a50b41c05f04a2788e92cc51ff311d302" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtelegraph_1_1signal" kindref="compound">signal</ref>&lt; T... &gt; &amp;</type>
        <definition>signal&lt;T...&gt;&amp; telegraph::signal&lt; T &gt;::remove</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>remove</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/utils/signal.hpp" line="29" column="1" bodyfile="lib/telegraph/utils/signal.hpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1signal_1a15ea24d911416785a6e40a14efcf67ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::signal&lt; T &gt;::operator()</definition>
        <argsstring>(T... v) const</argsstring>
        <name>operator()</name>
        <param>
          <type>T...</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/utils/signal.hpp" line="34" column="1" bodyfile="lib/telegraph/utils/signal.hpp" bodystart="34" bodyend="43"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/telegraph/utils/signal.hpp" line="10" column="1" bodyfile="lib/telegraph/utils/signal.hpp" bodystart="10" bodyend="46"/>
    <listofallmembers>
      <member refid="classtelegraph_1_1signal_1a849fca4479774ba132dd72d245bd50f1" prot="public" virt="non-virtual"><scope>telegraph::signal</scope><name>add</name></member>
      <member refid="classtelegraph_1_1signal_1aa1b6aaaccd54b00fb351677351084af3" prot="public" virt="non-virtual"><scope>telegraph::signal</scope><name>add</name></member>
      <member refid="classtelegraph_1_1signal_1aeb39b6e846fba597d37069a3d123e48d" prot="private" virt="non-virtual"><scope>telegraph::signal</scope><name>listeners_</name></member>
      <member refid="classtelegraph_1_1signal_1a15ea24d911416785a6e40a14efcf67ce" prot="public" virt="non-virtual"><scope>telegraph::signal</scope><name>operator()</name></member>
      <member refid="classtelegraph_1_1signal_1a2adad7eecd9f66137706625a08441968" prot="public" virt="non-virtual"><scope>telegraph::signal</scope><name>remove</name></member>
      <member refid="classtelegraph_1_1signal_1a50b41c05f04a2788e92cc51ff311d302" prot="public" virt="non-virtual"><scope>telegraph::signal</scope><name>remove</name></member>
      <member refid="classtelegraph_1_1signal_1abfa259e5f14f41325eff136e3d3ae1f6" prot="public" virt="non-virtual"><scope>telegraph::signal</scope><name>signal</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
