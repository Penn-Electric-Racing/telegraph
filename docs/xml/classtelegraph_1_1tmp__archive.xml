<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtelegraph_1_1tmp__archive" kind="class" language="C++" prot="public">
    <compoundname>telegraph::tmp_archive</compoundname>
    <basecompoundref refid="classtelegraph_1_1local__context" prot="public" virt="non-virtual">telegraph::local_context</basecompoundref>
    <includes refid="tmp__archive_8hpp" local="no">tmp_archive.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtelegraph_1_1tmp__archive_1ab27b7d3fface540e1ffc30d0992f78bc" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; const <ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *, std::shared_ptr&lt; <ref refid="classtelegraph_1_1tmp__data" kindref="compound">tmp_data</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;const variable*, std::shared_ptr&lt;tmp_data&gt; &gt; telegraph::tmp_archive::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="24" column="1" bodyfile="lib/telegraph/local/tmp_archive.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1tmp__archive_1ab85b8af285b67793b42e9d5488bb86f6" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; const <ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *, <ref refid="namespacetelegraph_1a58641aa5b1a2cbdb0431916a87069f64" kindref="member">subscription_ptr</ref> &gt;</type>
        <definition>std::unordered_map&lt;const variable*, subscription_ptr&gt; telegraph::tmp_archive::recordings_</definition>
        <argsstring></argsstring>
        <name>recordings_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="25" column="1" bodyfile="lib/telegraph/local/tmp_archive.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1tmp__archive_1ae6cb85e69fc2b32a65a4bee9fe353bc5" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="classtelegraph_1_1params__stream" kindref="compound">params_stream</ref> *, std::weak_ptr&lt; <ref refid="classtelegraph_1_1params__stream" kindref="compound">params_stream</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;params_stream*, std::weak_ptr&lt;params_stream&gt; &gt; telegraph::tmp_archive::recordings_queries_</definition>
        <argsstring></argsstring>
        <name>recordings_queries_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="27" column="1" bodyfile="lib/telegraph/local/tmp_archive.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a38157c35014a713c871fda88651c7318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>telegraph::tmp_archive::tmp_archive</definition>
        <argsstring>(io::io_context &amp;ioc, const std::string_view &amp;name, std::unique_ptr&lt; node &gt; &amp;&amp;s)</argsstring>
        <name>tmp_archive</name>
        <param>
          <type>io::io_context &amp;</type>
          <declname>ioc</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &gt; &amp;&amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="29" column="1" bodyfile="lib/telegraph/local/tmp_archive.cpp" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1aef321341a53bb0ff5c0c3bd6df3290de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>telegraph::tmp_archive::~tmp_archive</definition>
        <argsstring>()</argsstring>
        <name>~tmp_archive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="31" column="1" bodyfile="lib/telegraph/local/tmp_archive.cpp" bodystart="17" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a688a661b85092244e5634f9c3e380f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacetelegraph_1ad071241508ea0f86c7de0686016f9ca9" kindref="member">params_stream_ptr</ref></type>
        <definition>params_stream_ptr telegraph::tmp_archive::request</definition>
        <argsstring>(io::yield_ctx &amp;, const params &amp;p) override</argsstring>
        <name>request</name>
        <reimplements refid="classtelegraph_1_1context_1a6765d7fa22fe99b9a6723c511396b781">request</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <defname>yield</defname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1params" kindref="compound">params</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="33" column="1" bodyfile="lib/telegraph/local/tmp_archive.cpp" bodystart="58" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a6c71e7bf706d35c3e751e0bc7c8555b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::tmp_archive::record</definition>
        <argsstring>(variable *v, subscription_ptr s)</argsstring>
        <name>record</name>
        <param>
          <type><ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespacetelegraph_1a58641aa5b1a2cbdb0431916a87069f64" kindref="member">subscription_ptr</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="35" column="1" bodyfile="lib/telegraph/local/tmp_archive.cpp" bodystart="29" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a92ecdf029db73b48ca0d7eaf2838a492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::tmp_archive::record_stop</definition>
        <argsstring>(variable *v)</argsstring>
        <name>record_stop</name>
        <param>
          <type><ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="36" column="1" bodyfile="lib/telegraph/local/tmp_archive.cpp" bodystart="44" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1ae1838ff3fc3f1cd0eab31535a2f2e974" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool telegraph::tmp_archive::write_data</definition>
        <argsstring>(io::yield_ctx &amp;yield, variable *v, const std::vector&lt; data_point &gt; &amp;data) override</argsstring>
        <name>write_data</name>
        <reimplements refid="classtelegraph_1_1context_1a6067b9a6f2590733c81f6a3b2ed9cba7">write_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classtelegraph_1_1data__point" kindref="compound">data_point</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="38" column="1" bodyfile="lib/telegraph/local/tmp_archive.hpp" bodystart="38" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a228c2c681beb749268d09cd83d594246" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool telegraph::tmp_archive::write_data</definition>
        <argsstring>(io::yield_ctx &amp;yield, const std::vector&lt; std::string_view &gt; &amp;v, const std::vector&lt; data_point &gt; &amp;data) override</argsstring>
        <name>write_data</name>
        <reimplements refid="classtelegraph_1_1context_1a1f600d6159df21dd2750b1c706ca3412">write_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classtelegraph_1_1data__point" kindref="compound">data_point</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="50" column="1" bodyfile="lib/telegraph/local/tmp_archive.hpp" bodystart="50" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a7f2d18d2a4c9a7fd65d9752c8f4ce4d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetelegraph_1a6ffe775ac48dca2a4013b53d692199c8" kindref="member">data_query_ptr</ref></type>
        <definition>data_query_ptr telegraph::tmp_archive::query_data</definition>
        <argsstring>(io::yield_ctx &amp;ctx, const variable *v) override</argsstring>
        <name>query_data</name>
        <reimplements refid="classtelegraph_1_1context_1a301114c9b73194507ae58221566a3e57">query_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="59" column="1" bodyfile="lib/telegraph/local/tmp_archive.hpp" bodystart="59" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a8a860d67e3733e2eee7a8315942450e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacetelegraph_1a6ffe775ac48dca2a4013b53d692199c8" kindref="member">data_query_ptr</ref></type>
        <definition>data_query_ptr telegraph::tmp_archive::query_data</definition>
        <argsstring>(io::yield_ctx &amp;ctx, const std::vector&lt; std::string_view &gt; &amp;v) override</argsstring>
        <name>query_data</name>
        <reimplements refid="classtelegraph_1_1context_1a34793623d2a2def580ad0b8710c74c6d">query_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a10adc383103f4183e0a37485a5406cf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetelegraph_1a58641aa5b1a2cbdb0431916a87069f64" kindref="member">subscription_ptr</ref></type>
        <definition>subscription_ptr telegraph::tmp_archive::subscribe</definition>
        <argsstring>(io::yield_ctx &amp;ctx, const variable *v, float min_interval, float max_interval, float timeout) override</argsstring>
        <name>subscribe</name>
        <reimplements refid="classtelegraph_1_1context_1aec3b3b0d7210a86f2ea2f5067ef8e922">subscribe</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="73" column="1" bodyfile="lib/telegraph/local/tmp_archive.hpp" bodystart="73" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a9cf4be673f860b875b085c1ecac913ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetelegraph_1a58641aa5b1a2cbdb0431916a87069f64" kindref="member">subscription_ptr</ref></type>
        <definition>subscription_ptr telegraph::tmp_archive::subscribe</definition>
        <argsstring>(io::yield_ctx &amp;yield, const std::vector&lt; std::string_view &gt; &amp;path, float min_interval, float max_interval, float timeout) override</argsstring>
        <name>subscribe</name>
        <reimplements refid="classtelegraph_1_1context_1a8db167973f187f707a4108e112683969">subscribe</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="79" column="1" bodyfile="lib/telegraph/local/tmp_archive.hpp" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a9edb8a731ef989f40ae06e4b6c63c0be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
        <definition>value telegraph::tmp_archive::call</definition>
        <argsstring>(io::yield_ctx &amp;yield, action *a, value v, float timeout) override</argsstring>
        <name>call</name>
        <reimplements refid="classtelegraph_1_1context_1a72da471eb635e5505b10d2f1103359ac">call</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1action" kindref="compound">action</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="86" column="1" bodyfile="lib/telegraph/local/tmp_archive.hpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a1ccf8c90f14b36f3a09a501e0931e42e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
        <definition>value telegraph::tmp_archive::call</definition>
        <argsstring>(io::yield_ctx &amp;yield, const std::vector&lt; std::string_view &gt; &amp;path, value v, float timeout) override</argsstring>
        <name>call</name>
        <reimplements refid="classtelegraph_1_1context_1a0798d49ea0874a870d4c980f6f09b6c2">call</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="90" column="1" bodyfile="lib/telegraph/local/tmp_archive.hpp" bodystart="90" bodyend="94"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtelegraph_1_1tmp__archive_1a3e59e0a0a2ef78286399fd6f67b4431d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetelegraph_1ab59c7b38d99a98b4acc22433c920b1e6" kindref="member">local_context_ptr</ref></type>
        <definition>local_context_ptr telegraph::tmp_archive::create</definition>
        <argsstring>(io::yield_ctx &amp;, io::io_context &amp;ioc, const std::string_view &amp;name, const std::string_view &amp;type, const params &amp;p)</argsstring>
        <name>create</name>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <defname>yield</defname>
        </param>
        <param>
          <type>io::io_context &amp;</type>
          <declname>ioc</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1params" kindref="compound">params</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/tmp_archive.hpp" line="96" column="1" bodyfile="lib/telegraph/local/tmp_archive.cpp" bodystart="128" bodyend="147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="396">
        <label>telegraph::context</label>
        <link refid="classtelegraph_1_1context"/>
        <childnode refid="397" relation="public-inheritance">
        </childnode>
      </node>
      <node id="395">
        <label>telegraph::local_context</label>
        <link refid="classtelegraph_1_1local__context"/>
        <childnode refid="396" relation="public-inheritance">
        </childnode>
      </node>
      <node id="397">
        <label>std::enable_shared_from_this&lt; context &gt;</label>
      </node>
      <node id="394">
        <label>telegraph::tmp_archive</label>
        <link refid="classtelegraph_1_1tmp__archive"/>
        <childnode refid="395" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="403">
        <label>telegraph::params</label>
        <link refid="classtelegraph_1_1params"/>
      </node>
      <node id="400">
        <label>telegraph::context</label>
        <link refid="classtelegraph_1_1context"/>
        <childnode refid="401" relation="public-inheritance">
        </childnode>
        <childnode refid="402" relation="usage">
          <edgelabel>destroyed</edgelabel>
        </childnode>
        <childnode refid="403" relation="usage">
          <edgelabel>params_</edgelabel>
        </childnode>
      </node>
      <node id="399">
        <label>telegraph::local_context</label>
        <link refid="classtelegraph_1_1local__context"/>
        <childnode refid="400" relation="public-inheritance">
        </childnode>
      </node>
      <node id="401">
        <label>std::enable_shared_from_this&lt; context &gt;</label>
      </node>
      <node id="402">
        <label>telegraph::signal&lt; T &gt;</label>
        <link refid="classtelegraph_1_1signal"/>
      </node>
      <node id="398">
        <label>telegraph::tmp_archive</label>
        <link refid="classtelegraph_1_1tmp__archive"/>
        <childnode refid="399" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="lib/telegraph/local/tmp_archive.hpp" line="22" column="1" bodyfile="lib/telegraph/local/tmp_archive.hpp" bodystart="22" bodyend="99"/>
    <listofallmembers>
      <member refid="classtelegraph_1_1tmp__archive_1a9edb8a731ef989f40ae06e4b6c63c0be" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>call</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1a1ccf8c90f14b36f3a09a501e0931e42e" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>call</name></member>
      <member refid="classtelegraph_1_1context_1ad57ca6ff5da9ad653c688e7be3c0bbdc" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>context</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1a3e59e0a0a2ef78286399fd6f67b4431d" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>create</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1ab27b7d3fface540e1ffc30d0992f78bc" prot="private" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>data_</name></member>
      <member refid="classtelegraph_1_1local__context_1a301da16810636030a5098e4838587a99" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>destroy</name></member>
      <member refid="classtelegraph_1_1context_1aeae90cedad8326dcd9d6180d1058a10f" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>destroyed</name></member>
      <member refid="classtelegraph_1_1local__context_1aefadafdf25e6f6ba23c4b332872836e2" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>fetch</name></member>
      <member refid="classtelegraph_1_1context_1a5df9df51fb9fc54d69e4a7d43e66345a" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>get_executor</name></member>
      <member refid="classtelegraph_1_1context_1a56bd2af5bbfcdc234f6dd8df052585d7" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>get_name</name></member>
      <member refid="classtelegraph_1_1local__context_1a71a19090a93c3193615e61940fba918a" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>get_namespace</name></member>
      <member refid="classtelegraph_1_1local__context_1aba1ff115df4b54bae75ea41580ba32b5" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>get_namespace</name></member>
      <member refid="classtelegraph_1_1context_1ab8f2cf6a295d840f8011ff1b5533a1f8" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>get_params</name></member>
      <member refid="classtelegraph_1_1context_1a07d07a63d22454c2dc900c5cf749ce18" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>get_type</name></member>
      <member refid="classtelegraph_1_1context_1adfc55d7a2ba9d68c1f52abcbac7d74fd" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>get_uuid</name></member>
      <member refid="classtelegraph_1_1context_1a5053f72fe2b58e264a0ce00de2727953" prot="protected" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>headless_</name></member>
      <member refid="classtelegraph_1_1context_1a51949d83373c67e0c9e1050127df30c1" prot="protected" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>ioc_</name></member>
      <member refid="classtelegraph_1_1context_1a4cfaa125584e2f5ee5121c074bc024f1" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>is_headless</name></member>
      <member refid="classtelegraph_1_1local__context_1a2f6fe87993dd07754131c5248c98c11d" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>local_context</name></member>
      <member refid="classtelegraph_1_1context_1a19b7cc6a4c3cf53d79e07fc78573fc31" prot="protected" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>name_</name></member>
      <member refid="classtelegraph_1_1local__context_1a4ad057dd5bede6236b3af44a18577831" prot="protected" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>ns_</name></member>
      <member refid="classtelegraph_1_1context_1aa80ae462af488940258d71ccb6435b33" prot="protected" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>params_</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1a7f2d18d2a4c9a7fd65d9752c8f4ce4d5" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>query_data</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1a8a860d67e3733e2eee7a8315942450e5" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>query_data</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1a6c71e7bf706d35c3e751e0bc7c8555b9" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>record</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1a92ecdf029db73b48ca0d7eaf2838a492" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>record_stop</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1ab85b8af285b67793b42e9d5488bb86f6" prot="private" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>recordings_</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1ae6cb85e69fc2b32a65a4bee9fe353bc5" prot="private" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>recordings_queries_</name></member>
      <member refid="classtelegraph_1_1local__context_1ab64632b088982a5f994708db99690f4f" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>reg</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1a688a661b85092244e5634f9c3e380f94" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>request</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1a10adc383103f4183e0a37485a5406cf1" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>subscribe</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1a9cf4be673f860b875b085c1ecac913ff" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>subscribe</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1a38157c35014a713c871fda88651c7318" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>tmp_archive</name></member>
      <member refid="classtelegraph_1_1local__context_1a16ab8680bd633b8b8554960bb8c48498" prot="protected" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>tree_</name></member>
      <member refid="classtelegraph_1_1context_1af1cab34ed3278340157e25d828bb6c77" prot="protected" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>type_</name></member>
      <member refid="classtelegraph_1_1context_1a0bf1873b5a611776d48b3e854e9e3589" prot="protected" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>uuid_</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1ae1838ff3fc3f1cd0eab31535a2f2e974" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>write_data</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1a228c2c681beb749268d09cd83d594246" prot="public" virt="virtual"><scope>telegraph::tmp_archive</scope><name>write_data</name></member>
      <member refid="classtelegraph_1_1tmp__archive_1aef321341a53bb0ff5c0c3bd6df3290de" prot="public" virt="non-virtual"><scope>telegraph::tmp_archive</scope><name>~tmp_archive</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
