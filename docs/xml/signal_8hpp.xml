<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="signal_8hpp" kind="file" language="C++">
    <compoundname>signal.hpp</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">mutex</includes>
    <includes local="no">map</includes>
    <includedby refid="data_8hpp" local="yes">data.hpp</includedby>
    <includedby refid="collection_8hpp" local="yes">collection.hpp</includedby>
    <includedby refid="params_8hpp" local="yes">params.hpp</includedby>
    <incdepgraph>
      <node id="1225">
        <label>functional</label>
      </node>
      <node id="1224">
        <label>signal.hpp</label>
        <link refid="signal_8hpp"/>
        <childnode refid="1225" relation="include">
        </childnode>
        <childnode refid="1226" relation="include">
        </childnode>
        <childnode refid="1227" relation="include">
        </childnode>
      </node>
      <node id="1227">
        <label>map</label>
      </node>
      <node id="1226">
        <label>mutex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1258">
        <label>params.hpp</label>
        <link refid="params_8hpp"/>
        <childnode refid="1234" relation="include">
        </childnode>
        <childnode refid="1235" relation="include">
        </childnode>
        <childnode refid="1231" relation="include">
        </childnode>
      </node>
      <node id="1239">
        <label>dummy_device.hpp</label>
        <link refid="dummy__device_8hpp"/>
        <childnode refid="1240" relation="include">
        </childnode>
        <childnode refid="1233" relation="include">
        </childnode>
      </node>
      <node id="1251">
        <label>config.cpp</label>
        <link refid="config_8cpp"/>
      </node>
      <node id="1228">
        <label>signal.hpp</label>
        <link refid="signal_8hpp"/>
        <childnode refid="1229" relation="include">
        </childnode>
        <childnode refid="1257" relation="include">
        </childnode>
        <childnode refid="1258" relation="include">
        </childnode>
      </node>
      <node id="1247">
        <label>server.cpp</label>
        <link refid="lib_2telegraph_2remote_2server_8cpp"/>
      </node>
      <node id="1248">
        <label>nodes.hpp</label>
        <link refid="lib_2telegraph_2common_2nodes_8hpp"/>
        <childnode refid="1249" relation="include">
        </childnode>
        <childnode refid="1235" relation="include">
        </childnode>
        <childnode refid="1250" relation="include">
        </childnode>
        <childnode refid="1252" relation="include">
        </childnode>
        <childnode refid="1253" relation="include">
        </childnode>
        <childnode refid="1236" relation="include">
        </childnode>
        <childnode refid="1231" relation="include">
        </childnode>
        <childnode refid="1239" relation="include">
        </childnode>
        <childnode refid="1241" relation="include">
        </childnode>
        <childnode refid="1242" relation="include">
        </childnode>
        <childnode refid="1243" relation="include">
        </childnode>
        <childnode refid="1245" relation="include">
        </childnode>
        <childnode refid="1255" relation="include">
        </childnode>
      </node>
      <node id="1255">
        <label>tree-test.cpp</label>
        <link refid="tree-test_8cpp"/>
      </node>
      <node id="1236">
        <label>container.hpp</label>
        <link refid="container_8hpp"/>
        <childnode refid="1237" relation="include">
        </childnode>
        <childnode refid="1233" relation="include">
        </childnode>
      </node>
      <node id="1252">
        <label>generator.hpp</label>
        <link refid="generator_8hpp"/>
        <childnode refid="1253" relation="include">
        </childnode>
        <childnode refid="1254" relation="include">
        </childnode>
      </node>
      <node id="1240">
        <label>dummy_device.cpp</label>
        <link refid="dummy__device_8cpp"/>
      </node>
      <node id="1246">
        <label>server.hpp</label>
        <link refid="server_8hpp"/>
        <childnode refid="1247" relation="include">
        </childnode>
        <childnode refid="1233" relation="include">
        </childnode>
      </node>
      <node id="1256">
        <label>publisher.hpp</label>
        <link refid="lib_2telegraph_2common_2publisher_8hpp"/>
        <childnode refid="1239" relation="include">
        </childnode>
      </node>
      <node id="1250">
        <label>config.hpp</label>
        <link refid="config_8hpp"/>
        <childnode refid="1251" relation="include">
        </childnode>
        <childnode refid="1252" relation="include">
        </childnode>
        <childnode refid="1253" relation="include">
        </childnode>
        <childnode refid="1254" relation="include">
        </childnode>
        <childnode refid="1255" relation="include">
        </childnode>
      </node>
      <node id="1231">
        <label>device.hpp</label>
        <link refid="device_8hpp"/>
        <childnode refid="1232" relation="include">
        </childnode>
        <childnode refid="1233" relation="include">
        </childnode>
      </node>
      <node id="1249">
        <label>nodes.cpp</label>
        <link refid="nodes_8cpp"/>
      </node>
      <node id="1234">
        <label>namespace.hpp</label>
        <link refid="common_2namespace_8hpp"/>
        <childnode refid="1235" relation="include">
        </childnode>
        <childnode refid="1236" relation="include">
        </childnode>
        <childnode refid="1238" relation="include">
        </childnode>
        <childnode refid="1244" relation="include">
        </childnode>
        <childnode refid="1245" relation="include">
        </childnode>
        <childnode refid="1246" relation="include">
        </childnode>
      </node>
      <node id="1237">
        <label>container.cpp</label>
        <link refid="container_8cpp"/>
      </node>
      <node id="1257">
        <label>collection.hpp</label>
        <link refid="collection_8hpp"/>
        <childnode refid="1234" relation="include">
        </childnode>
        <childnode refid="1244" relation="include">
        </childnode>
      </node>
      <node id="1253">
        <label>generator.cpp</label>
        <link refid="generator_8cpp"/>
      </node>
      <node id="1242">
        <label>tmp_archive.hpp</label>
        <link refid="tmp__archive_8hpp"/>
        <childnode refid="1243" relation="include">
        </childnode>
      </node>
      <node id="1238">
        <label>namespace.hpp</label>
        <link refid="local_2namespace_8hpp"/>
        <childnode refid="1236" relation="include">
        </childnode>
        <childnode refid="1231" relation="include">
        </childnode>
        <childnode refid="1239" relation="include">
        </childnode>
        <childnode refid="1241" relation="include">
        </childnode>
        <childnode refid="1242" relation="include">
        </childnode>
        <childnode refid="1233" relation="include">
        </childnode>
      </node>
      <node id="1235">
        <label>params.cpp</label>
        <link refid="params_8cpp"/>
      </node>
      <node id="1244">
        <label>forwarder.hpp</label>
        <link refid="forwarder_8hpp"/>
        <childnode refid="1245" relation="include">
        </childnode>
        <childnode refid="1246" relation="include">
        </childnode>
      </node>
      <node id="1232">
        <label>device.cpp</label>
        <link refid="device_8cpp"/>
      </node>
      <node id="1230">
        <label>adapter.hpp</label>
        <link refid="adapter_8hpp"/>
        <childnode refid="1231" relation="include">
        </childnode>
      </node>
      <node id="1254">
        <label>generate.cpp</label>
        <link refid="generate_8cpp"/>
      </node>
      <node id="1233">
        <label>server.cpp</label>
        <link refid="main_2server_8cpp"/>
      </node>
      <node id="1229">
        <label>data.hpp</label>
        <link refid="data_8hpp"/>
        <childnode refid="1230" relation="include">
        </childnode>
        <childnode refid="1234" relation="include">
        </childnode>
        <childnode refid="1248" relation="include">
        </childnode>
        <childnode refid="1256" relation="include">
        </childnode>
        <childnode refid="1236" relation="include">
        </childnode>
        <childnode refid="1242" relation="include">
        </childnode>
        <childnode refid="1243" relation="include">
        </childnode>
        <childnode refid="1244" relation="include">
        </childnode>
      </node>
      <node id="1241">
        <label>namespace.cpp</label>
        <link refid="namespace_8cpp"/>
      </node>
      <node id="1245">
        <label>forwarder.cpp</label>
        <link refid="forwarder_8cpp"/>
      </node>
      <node id="1243">
        <label>tmp_archive.cpp</label>
        <link refid="tmp__archive_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classtelegraph_1_1signal" prot="public">telegraph::signal</innerclass>
    <innernamespace refid="namespacetelegraph">telegraph</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__TELEGRAPH_SIGNAL_HPP__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__TELEGRAPH_SIGNAL_HPP__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetelegraph" kindref="compound">telegraph</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="10" refid="classtelegraph_1_1signal" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtelegraph_1_1signal" kindref="compound">signal</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12" refid="classtelegraph_1_1signal_1abfa259e5f14f41325eff136e3d3ae1f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtelegraph_1_1signal_1abfa259e5f14f41325eff136e3d3ae1f6" kindref="member">signal</ref>()<sp/>:<sp/>listeners_()<sp/>{}</highlight></codeline>
<codeline lineno="13" refid="classtelegraph_1_1signal_1a849fca4479774ba132dd72d245bd50f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtelegraph_1_1signal" kindref="compound">signal</ref>&lt;T...&gt;&amp;<sp/><ref refid="classtelegraph_1_1signal_1a849fca4479774ba132dd72d245bd50f1" kindref="member">add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(T...)&gt;<sp/>&amp;cb)<sp/>{<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listeners_[(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&amp;cb]<sp/>=<sp/>cb;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20" refid="classtelegraph_1_1signal_1aa1b6aaaccd54b00fb351677351084af3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtelegraph_1_1signal" kindref="compound">signal</ref>&lt;T...&gt;&amp;<sp/><ref refid="classtelegraph_1_1signal_1aa1b6aaaccd54b00fb351677351084af3" kindref="member">add</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(T...)&gt;<sp/>&amp;cb)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listeners_[ptr]<sp/>=<sp/>cb;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="classtelegraph_1_1signal_1a2adad7eecd9f66137706625a08441968" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtelegraph_1_1signal" kindref="compound">signal</ref>&lt;T...&gt;&amp;<sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;void(T...)&gt;<sp/>&amp;cb)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listeners_.erase(&amp;cb);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29" refid="classtelegraph_1_1signal_1a50b41c05f04a2788e92cc51ff311d302" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtelegraph_1_1signal" kindref="compound">signal</ref>&lt;T...&gt;&amp;<sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listeners_.erase(ptr);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classtelegraph_1_1signal_1a15ea24d911416785a6e40a14efcf67ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1signal_1a15ea24d911416785a6e40a14efcf67ce" kindref="member">operator()</ref>(T...<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>maintaining<sp/>an<sp/>iterator<sp/>ahead<sp/>of<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>you<sp/>can<sp/>safely<sp/>remove<sp/>the<sp/>listener<sp/>currently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>called<sp/>while<sp/>we<sp/>iterate<sp/>through<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>listeners_.cbegin(),<sp/>next_it<sp/>=<sp/>it;<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>listeners_.cend();<sp/>it<sp/>=<sp/>next_it)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++next_it;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(it-&gt;second)(std::forward&lt;T&gt;(v)...);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>std::function&lt;void(T...)&gt;&gt;<sp/>listeners_;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>template&lt;typename...<sp/>T&gt;</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class<sp/>safe_signal<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safe_signal()<sp/>:<sp/>listeners_()<sp/>{}</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safe_signal&lt;T...&gt;&amp;<sp/>add(const<sp/>std::function&lt;void(T...)&gt;<sp/>&amp;cb)<sp/>{<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listeners_[(void*)&amp;cb]<sp/>=<sp/>cb;</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safe_signal&lt;T...&gt;&amp;<sp/>add(void*<sp/>ptr,<sp/>const<sp/>std::function&lt;void(T...)&gt;<sp/>&amp;cb)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listeners_[ptr]<sp/>=<sp/>cb;</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safe_signal&lt;T...&gt;&amp;<sp/>remove(const<sp/>std::function&lt;void(T...)&gt;<sp/>&amp;cb)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listeners_.erase(&amp;cb);</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safe_signal&lt;T...&gt;&amp;<sp/>remove(void*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listeners_.erase(ptr);</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>operator()(T...<sp/>v)<sp/>const<sp/>{<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;void*,<sp/>std::function&lt;void(T...)&gt;&gt;<sp/>ls(listeners_);</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto&amp;<sp/>l<sp/>:<sp/>ls)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.second(v...);</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;void*,<sp/>std::function&lt;void(T...)&gt;&gt;<sp/>listeners_;</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::mutex<sp/>mutex_;</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="lib/telegraph/utils/signal.hpp"/>
  </compounddef>
</doxygen>
