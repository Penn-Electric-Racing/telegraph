<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtelegraph_1_1local__component" kind="class" language="C++" prot="public">
    <compoundname>telegraph::local_component</compoundname>
    <basecompoundref refid="classtelegraph_1_1local__context" prot="public" virt="non-virtual">telegraph::local_context</basecompoundref>
    <derivedcompoundref refid="classtelegraph_1_1device__scanner" prot="public" virt="non-virtual">telegraph::device_scanner</derivedcompoundref>
    <includes refid="local_2namespace_8hpp" local="no">namespace.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtelegraph_1_1local__component_1a4cd9cd1728ba53391553b81dbb4e3494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>telegraph::local_component::local_component</definition>
        <argsstring>(io::io_context &amp;ioc, const std::string_view &amp;name, const std::string_view &amp;type, const params &amp;i)</argsstring>
        <name>local_component</name>
        <param>
          <type>io::io_context &amp;</type>
          <declname>ioc</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1params" kindref="compound">params</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="69" column="1" bodyfile="lib/telegraph/local/namespace.cpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__component_1abbeb3b12dc95e19e1a2972e9a374fd33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &gt;</type>
        <definition>std::shared_ptr&lt;node&gt; telegraph::local_component::fetch</definition>
        <argsstring>(io::yield_ctx &amp;ctx) override</argsstring>
        <name>fetch</name>
        <reimplements refid="classtelegraph_1_1local__context_1aefadafdf25e6f6ba23c4b332872836e2">fetch</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="72" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__component_1a53aa0199bd938578a6400cfd3a19c86f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetelegraph_1a58641aa5b1a2cbdb0431916a87069f64" kindref="member">subscription_ptr</ref></type>
        <definition>subscription_ptr telegraph::local_component::subscribe</definition>
        <argsstring>(io::yield_ctx &amp;ctx, const std::vector&lt; std::string_view &gt; &amp;variable, float min_interval, float max_interval, float timeout) override</argsstring>
        <name>subscribe</name>
        <reimplements refid="classtelegraph_1_1context_1a8db167973f187f707a4108e112683969">subscribe</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="75" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__component_1a5a2282f1cf80dce32ed26e37c956d5c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetelegraph_1a58641aa5b1a2cbdb0431916a87069f64" kindref="member">subscription_ptr</ref></type>
        <definition>subscription_ptr telegraph::local_component::subscribe</definition>
        <argsstring>(io::yield_ctx &amp;ctx, const variable *v, float min_interval, float max_interval, float timeout) override</argsstring>
        <name>subscribe</name>
        <reimplements refid="classtelegraph_1_1context_1aec3b3b0d7210a86f2ea2f5067ef8e922">subscribe</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="79" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__component_1af4d74d161754055d3f811bfe95a59f26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
        <definition>value telegraph::local_component::call</definition>
        <argsstring>(io::yield_ctx &amp;ctx, action *a, value v, float timeout) override</argsstring>
        <name>call</name>
        <reimplements refid="classtelegraph_1_1context_1a72da471eb635e5505b10d2f1103359ac">call</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1action" kindref="compound">action</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="83" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__component_1a6fa6fbf49a0d77a8da54b4a77b578edd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
        <definition>value telegraph::local_component::call</definition>
        <argsstring>(io::yield_ctx &amp;ctx, const std::vector&lt; std::string_view &gt; &amp;a, value v, float timeout) override</argsstring>
        <name>call</name>
        <reimplements refid="classtelegraph_1_1context_1a0798d49ea0874a870d4c980f6f09b6c2">call</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="84" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="84" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__component_1ac546cfea4802ef3ca125c5dc183adf6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool telegraph::local_component::write_data</definition>
        <argsstring>(io::yield_ctx &amp;yield, variable *v, const std::vector&lt; data_point &gt; &amp;data) override</argsstring>
        <name>write_data</name>
        <reimplements refid="classtelegraph_1_1context_1a6067b9a6f2590733c81f6a3b2ed9cba7">write_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classtelegraph_1_1data__point" kindref="compound">data_point</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="87" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="87" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__component_1a572a4116130a4b7ad270701eba2af0e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool telegraph::local_component::write_data</definition>
        <argsstring>(io::yield_ctx &amp;yield, const std::vector&lt; std::string_view &gt; &amp;var, const std::vector&lt; data_point &gt; &amp;data) override</argsstring>
        <name>write_data</name>
        <reimplements refid="classtelegraph_1_1context_1a1f600d6159df21dd2750b1c706ca3412">write_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classtelegraph_1_1data__point" kindref="compound">data_point</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="89" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="89" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__component_1a4410ca44a41de1c139273efd31f281c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetelegraph_1a6ffe775ac48dca2a4013b53d692199c8" kindref="member">data_query_ptr</ref></type>
        <definition>data_query_ptr telegraph::local_component::query_data</definition>
        <argsstring>(io::yield_ctx &amp;yield, const variable *v) override</argsstring>
        <name>query_data</name>
        <reimplements refid="classtelegraph_1_1context_1a301114c9b73194507ae58221566a3e57">query_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="92" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__component_1ad8c3abb4f9e6ab31b0590beac901eec5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetelegraph_1a6ffe775ac48dca2a4013b53d692199c8" kindref="member">data_query_ptr</ref></type>
        <definition>data_query_ptr telegraph::local_component::query_data</definition>
        <argsstring>(io::yield_ctx &amp;yield, const std::vector&lt; std::string_view &gt; &amp;v) override</argsstring>
        <name>query_data</name>
        <reimplements refid="classtelegraph_1_1context_1a34793623d2a2def580ad0b8710c74c6d">query_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="93" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="93" bodyend="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="227">
        <label>telegraph::local_component</label>
        <link refid="classtelegraph_1_1local__component"/>
        <childnode refid="228" relation="public-inheritance">
        </childnode>
      </node>
      <node id="229">
        <label>telegraph::context</label>
        <link refid="classtelegraph_1_1context"/>
        <childnode refid="230" relation="public-inheritance">
        </childnode>
      </node>
      <node id="228">
        <label>telegraph::local_context</label>
        <link refid="classtelegraph_1_1local__context"/>
        <childnode refid="229" relation="public-inheritance">
        </childnode>
      </node>
      <node id="230">
        <label>std::enable_shared_from_this&lt; context &gt;</label>
      </node>
      <node id="231">
        <label>telegraph::device_scanner</label>
        <link refid="classtelegraph_1_1device__scanner"/>
        <childnode refid="227" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="232">
        <label>telegraph::local_component</label>
        <link refid="classtelegraph_1_1local__component"/>
        <childnode refid="233" relation="public-inheritance">
        </childnode>
      </node>
      <node id="237">
        <label>telegraph::params</label>
        <link refid="classtelegraph_1_1params"/>
      </node>
      <node id="234">
        <label>telegraph::context</label>
        <link refid="classtelegraph_1_1context"/>
        <childnode refid="235" relation="public-inheritance">
        </childnode>
        <childnode refid="236" relation="usage">
          <edgelabel>destroyed</edgelabel>
        </childnode>
        <childnode refid="237" relation="usage">
          <edgelabel>params_</edgelabel>
        </childnode>
      </node>
      <node id="233">
        <label>telegraph::local_context</label>
        <link refid="classtelegraph_1_1local__context"/>
        <childnode refid="234" relation="public-inheritance">
        </childnode>
      </node>
      <node id="235">
        <label>std::enable_shared_from_this&lt; context &gt;</label>
      </node>
      <node id="236">
        <label>telegraph::signal&lt; T &gt;</label>
        <link refid="classtelegraph_1_1signal"/>
      </node>
    </collaborationgraph>
    <location file="lib/telegraph/local/namespace.hpp" line="67" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="67" bodyend="94"/>
    <listofallmembers>
      <member refid="classtelegraph_1_1local__component_1af4d74d161754055d3f811bfe95a59f26" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>call</name></member>
      <member refid="classtelegraph_1_1local__component_1a6fa6fbf49a0d77a8da54b4a77b578edd" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>call</name></member>
      <member refid="classtelegraph_1_1context_1ad57ca6ff5da9ad653c688e7be3c0bbdc" prot="public" virt="non-virtual"><scope>telegraph::local_component</scope><name>context</name></member>
      <member refid="classtelegraph_1_1local__context_1a301da16810636030a5098e4838587a99" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>destroy</name></member>
      <member refid="classtelegraph_1_1context_1aeae90cedad8326dcd9d6180d1058a10f" prot="public" virt="non-virtual"><scope>telegraph::local_component</scope><name>destroyed</name></member>
      <member refid="classtelegraph_1_1local__component_1abbeb3b12dc95e19e1a2972e9a374fd33" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>fetch</name></member>
      <member refid="classtelegraph_1_1context_1a5df9df51fb9fc54d69e4a7d43e66345a" prot="public" virt="non-virtual"><scope>telegraph::local_component</scope><name>get_executor</name></member>
      <member refid="classtelegraph_1_1context_1a56bd2af5bbfcdc234f6dd8df052585d7" prot="public" virt="non-virtual"><scope>telegraph::local_component</scope><name>get_name</name></member>
      <member refid="classtelegraph_1_1local__context_1a71a19090a93c3193615e61940fba918a" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>get_namespace</name></member>
      <member refid="classtelegraph_1_1local__context_1aba1ff115df4b54bae75ea41580ba32b5" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>get_namespace</name></member>
      <member refid="classtelegraph_1_1context_1ab8f2cf6a295d840f8011ff1b5533a1f8" prot="public" virt="non-virtual"><scope>telegraph::local_component</scope><name>get_params</name></member>
      <member refid="classtelegraph_1_1context_1a07d07a63d22454c2dc900c5cf749ce18" prot="public" virt="non-virtual"><scope>telegraph::local_component</scope><name>get_type</name></member>
      <member refid="classtelegraph_1_1context_1adfc55d7a2ba9d68c1f52abcbac7d74fd" prot="public" virt="non-virtual"><scope>telegraph::local_component</scope><name>get_uuid</name></member>
      <member refid="classtelegraph_1_1context_1a5053f72fe2b58e264a0ce00de2727953" prot="protected" virt="non-virtual"><scope>telegraph::local_component</scope><name>headless_</name></member>
      <member refid="classtelegraph_1_1context_1a51949d83373c67e0c9e1050127df30c1" prot="protected" virt="non-virtual"><scope>telegraph::local_component</scope><name>ioc_</name></member>
      <member refid="classtelegraph_1_1context_1a4cfaa125584e2f5ee5121c074bc024f1" prot="public" virt="non-virtual"><scope>telegraph::local_component</scope><name>is_headless</name></member>
      <member refid="classtelegraph_1_1local__component_1a4cd9cd1728ba53391553b81dbb4e3494" prot="public" virt="non-virtual"><scope>telegraph::local_component</scope><name>local_component</name></member>
      <member refid="classtelegraph_1_1local__context_1a2f6fe87993dd07754131c5248c98c11d" prot="public" virt="non-virtual"><scope>telegraph::local_component</scope><name>local_context</name></member>
      <member refid="classtelegraph_1_1context_1a19b7cc6a4c3cf53d79e07fc78573fc31" prot="protected" virt="non-virtual"><scope>telegraph::local_component</scope><name>name_</name></member>
      <member refid="classtelegraph_1_1local__context_1a4ad057dd5bede6236b3af44a18577831" prot="protected" virt="non-virtual"><scope>telegraph::local_component</scope><name>ns_</name></member>
      <member refid="classtelegraph_1_1context_1aa80ae462af488940258d71ccb6435b33" prot="protected" virt="non-virtual"><scope>telegraph::local_component</scope><name>params_</name></member>
      <member refid="classtelegraph_1_1local__component_1a4410ca44a41de1c139273efd31f281c4" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>query_data</name></member>
      <member refid="classtelegraph_1_1local__component_1ad8c3abb4f9e6ab31b0590beac901eec5" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>query_data</name></member>
      <member refid="classtelegraph_1_1local__context_1ab64632b088982a5f994708db99690f4f" prot="public" virt="non-virtual"><scope>telegraph::local_component</scope><name>reg</name></member>
      <member refid="classtelegraph_1_1context_1a6765d7fa22fe99b9a6723c511396b781" prot="public" virt="pure-virtual"><scope>telegraph::local_component</scope><name>request</name></member>
      <member refid="classtelegraph_1_1local__component_1a53aa0199bd938578a6400cfd3a19c86f" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>subscribe</name></member>
      <member refid="classtelegraph_1_1local__component_1a5a2282f1cf80dce32ed26e37c956d5c4" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>subscribe</name></member>
      <member refid="classtelegraph_1_1local__context_1a16ab8680bd633b8b8554960bb8c48498" prot="protected" virt="non-virtual"><scope>telegraph::local_component</scope><name>tree_</name></member>
      <member refid="classtelegraph_1_1context_1af1cab34ed3278340157e25d828bb6c77" prot="protected" virt="non-virtual"><scope>telegraph::local_component</scope><name>type_</name></member>
      <member refid="classtelegraph_1_1context_1a0bf1873b5a611776d48b3e854e9e3589" prot="protected" virt="non-virtual"><scope>telegraph::local_component</scope><name>uuid_</name></member>
      <member refid="classtelegraph_1_1local__component_1ac546cfea4802ef3ca125c5dc183adf6c" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>write_data</name></member>
      <member refid="classtelegraph_1_1local__component_1a572a4116130a4b7ad270701eba2af0e7" prot="public" virt="virtual"><scope>telegraph::local_component</scope><name>write_data</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
