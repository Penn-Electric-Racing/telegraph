<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtelegraph_1_1device" kind="class" language="C++" prot="public">
    <compoundname>telegraph::device</compoundname>
    <basecompoundref refid="classtelegraph_1_1local__context" prot="public" virt="non-virtual">telegraph::local_context</basecompoundref>
    <includes refid="device_8hpp" local="no">device.hpp</includes>
    <innerclass refid="structtelegraph_1_1device_1_1req" prot="private">telegraph::device::req</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtelegraph_1_1device_1a6f1242dc2dc03ccb421da753192ffec9" prot="private" static="no" mutable="no">
        <type>std::deque&lt; stream::Packet &gt;</type>
        <definition>std::deque&lt;stream::Packet&gt; telegraph::device::write_queue_</definition>
        <argsstring></argsstring>
        <name>write_queue_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="27" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1device_1af59b858e123094a0c3d31958bc1b70eb" prot="private" static="no" mutable="no">
        <type>io::streambuf</type>
        <definition>io::streambuf telegraph::device::write_buf_</definition>
        <argsstring></argsstring>
        <name>write_buf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="28" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1device_1a5319409f8f9859ed56df9369b2596122" prot="private" static="no" mutable="no">
        <type>io::streambuf</type>
        <definition>io::streambuf telegraph::device::read_buf_</definition>
        <argsstring></argsstring>
        <name>read_buf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="29" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1device_1a7b757fe926660465e746d0f218dbc23e" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t telegraph::device::req_id_</definition>
        <argsstring></argsstring>
        <name>req_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="31" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1device_1a43c185f8aad0a1d021ca94327d6e849b" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; uint32_t, req &gt;</type>
        <definition>std::unordered_map&lt;uint32_t, req&gt; telegraph::device::reqs_</definition>
        <argsstring></argsstring>
        <name>reqs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="39" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1device_1a0c2869fcfd0d94a10e2ef8474e54f50a" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="classtelegraph_1_1node_1a90bc576d668ed141d5354a06aa9c8d9a" kindref="member">node::id</ref>, std::shared_ptr&lt; <ref refid="classtelegraph_1_1adapter__base" kindref="compound">adapter_base</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;node::id, std::shared_ptr&lt;adapter_base&gt; &gt; telegraph::device::adapters_</definition>
        <argsstring></argsstring>
        <name>adapters_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="42" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1device_1ad95bc183c659c9a6fbca7030a28536a7" prot="private" static="no" mutable="no">
        <type>io::serial_port</type>
        <definition>io::serial_port telegraph::device::port_</definition>
        <argsstring></argsstring>
        <name>port_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="44" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtelegraph_1_1device_1a439a2eae3e8fceab20e87dea027dd912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>telegraph::device::device</definition>
        <argsstring>(io::io_context &amp;ioc, const std::string &amp;name, const std::string &amp;port, int baud)</argsstring>
        <name>device</name>
        <param>
          <type>io::io_context &amp;</type>
          <declname>ioc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>baud</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="46" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="29" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a55d99b0a3df689b60480a54ebaab6a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>telegraph::device::~device</definition>
        <argsstring>()</argsstring>
        <name>~device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="47" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a2f56da47b6e816ac9fd3b1ff2db5d2c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::device::init</definition>
        <argsstring>(io::yield_ctx &amp;, int millisec_timeout)</argsstring>
        <name>init</name>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <defname>yield</defname>
        </param>
        <param>
          <type>int</type>
          <declname>millisec_timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="51" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="45" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a9e5042e4640035b28dd9de780d7326df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetelegraph_1ad071241508ea0f86c7de0686016f9ca9" kindref="member">params_stream_ptr</ref></type>
        <definition>params_stream_ptr telegraph::device::request</definition>
        <argsstring>(io::yield_ctx &amp;, const params &amp;p)</argsstring>
        <name>request</name>
        <reimplements refid="classtelegraph_1_1context_1a6765d7fa22fe99b9a6723c511396b781">request</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1params" kindref="compound">params</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="54" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1ab0117f6015f904afae72d6ab90c8ad95" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacetelegraph_1a58641aa5b1a2cbdb0431916a87069f64" kindref="member">subscription_ptr</ref></type>
        <definition>subscription_ptr telegraph::device::subscribe</definition>
        <argsstring>(io::yield_ctx &amp;ctx, const variable *v, float min_interval, float max_interval, float timeout) override</argsstring>
        <name>subscribe</name>
        <reimplements refid="classtelegraph_1_1context_1aec3b3b0d7210a86f2ea2f5067ef8e922">subscribe</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="56" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="119" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1ac6558ddeed4799f4d69428863363a1e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
        <definition>value telegraph::device::call</definition>
        <argsstring>(io::yield_ctx &amp;ctx, action *a, value v, float timeout)</argsstring>
        <name>call</name>
        <reimplements refid="classtelegraph_1_1context_1a72da471eb635e5505b10d2f1103359ac">call</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1action" kindref="compound">action</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="59" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="230" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a8d619b64e89b2ae933b282dc05956d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void telegraph::device::destroy</definition>
        <argsstring>(io::yield_ctx &amp;ctx) override</argsstring>
        <name>destroy</name>
        <reimplements refid="classtelegraph_1_1context_1a4017c1bcd9c84170a5cb612ae45d6fb4">destroy</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="61" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1aedf52d2dbb133e2b71958c116671b9df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetelegraph_1a58641aa5b1a2cbdb0431916a87069f64" kindref="member">subscription_ptr</ref></type>
        <definition>subscription_ptr telegraph::device::subscribe</definition>
        <argsstring>(io::yield_ctx &amp;ctx, const std::vector&lt; std::string_view &gt; &amp;path, float min_interval, float max_interval, float timeout) override</argsstring>
        <name>subscribe</name>
        <reimplements refid="classtelegraph_1_1context_1a8db167973f187f707a4108e112683969">subscribe</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_interval</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="64" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="64" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a581368ab8f35ef72db17d2e330ded068" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
        <definition>value telegraph::device::call</definition>
        <argsstring>(io::yield_ctx &amp;ctx, const std::vector&lt; std::string_view &gt; &amp;path, value v, float timeout) override</argsstring>
        <name>call</name>
        <reimplements refid="classtelegraph_1_1context_1a0798d49ea0874a870d4c980f6f09b6c2">call</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1value" kindref="compound">value</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="74" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="74" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a60150e55bc6fb63d27252051caf462db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool telegraph::device::write_data</definition>
        <argsstring>(io::yield_ctx &amp;, variable *v, const std::vector&lt; data_point &gt; &amp;d) override</argsstring>
        <name>write_data</name>
        <reimplements refid="classtelegraph_1_1context_1a6067b9a6f2590733c81f6a3b2ed9cba7">write_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classtelegraph_1_1data__point" kindref="compound">data_point</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="83" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="83" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1aaedca7b20bc36f8439d5afccbcaf1304" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool telegraph::device::write_data</definition>
        <argsstring>(io::yield_ctx &amp;, const std::vector&lt; std::string_view &gt; &amp;path, const std::vector&lt; data_point &gt; &amp;d) override</argsstring>
        <name>write_data</name>
        <reimplements refid="classtelegraph_1_1context_1a1f600d6159df21dd2750b1c706ca3412">write_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classtelegraph_1_1data__point" kindref="compound">data_point</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="86" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a4c46c7e98bf5a573a9966fd2cc199021" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetelegraph_1a6ffe775ac48dca2a4013b53d692199c8" kindref="member">data_query_ptr</ref></type>
        <definition>data_query_ptr telegraph::device::query_data</definition>
        <argsstring>(io::yield_ctx &amp;yield, const variable *n) override</argsstring>
        <name>query_data</name>
        <reimplements refid="classtelegraph_1_1context_1a301114c9b73194507ae58221566a3e57">query_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="90" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="90" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a9a5ef799aadf591a355cc1e50442d762" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetelegraph_1a6ffe775ac48dca2a4013b53d692199c8" kindref="member">data_query_ptr</ref></type>
        <definition>data_query_ptr telegraph::device::query_data</definition>
        <argsstring>(io::yield_ctx &amp;yield, const std::vector&lt; std::string_view &gt; &amp;p) override</argsstring>
        <name>query_data</name>
        <reimplements refid="classtelegraph_1_1context_1a34793623d2a2def580ad0b8710c74c6d">query_data</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="92" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="92" bodyend="93"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtelegraph_1_1device_1a4bb333fc0232bdb69283e71f086028c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetelegraph_1ab59c7b38d99a98b4acc22433c920b1e6" kindref="member">local_context_ptr</ref></type>
        <definition>local_context_ptr telegraph::device::create</definition>
        <argsstring>(io::yield_ctx &amp;, io::io_context &amp;ioc, const std::string_view &amp;name, const std::string_view &amp;type, const params &amp;p)</argsstring>
        <name>create</name>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <defname>yield</defname>
        </param>
        <param>
          <type>io::io_context &amp;</type>
          <declname>ioc</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1params" kindref="compound">params</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="95" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="424" bodyend="432"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtelegraph_1_1device_1af30e3bc32bf3d6b2b8e5f2c8a1a528e2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classtelegraph_1_1device" kindref="compound">device</ref> &gt;</type>
        <definition>std::shared_ptr&lt;device&gt; telegraph::device::shared_device_this</definition>
        <argsstring>()</argsstring>
        <name>shared_device_this</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="99" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1ad6c50a1e9bd8c9bb022ebf13b24b7e78" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::weak_ptr&lt; <ref refid="classtelegraph_1_1device" kindref="compound">device</ref> &gt;</type>
        <definition>std::weak_ptr&lt;device&gt; telegraph::device::weak_device_this</definition>
        <argsstring>()</argsstring>
        <name>weak_device_this</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="102" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a130aa6479bff1bd4cf730620116a1578" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::device::do_reading</definition>
        <argsstring>(size_t requested=0)</argsstring>
        <name>do_reading</name>
        <param>
          <type>size_t</type>
          <declname>requested</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="108" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="250" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1ad96de759839056b7be491da0998f7115" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::device::on_read</definition>
        <argsstring>(const boost::system::error_code &amp;ec, size_t transferred)</argsstring>
        <name>on_read</name>
        <param>
          <type>const boost::system::error_code &amp;</type>
          <declname>ec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>transferred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="109" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="271" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a6dba9a47790dd28f922db63724c607f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::device::do_write_next</definition>
        <argsstring>()</argsstring>
        <name>do_write_next</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="111" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="364" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a714dd7269a70fa2989463fdff7ab6255" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::device::write_packet</definition>
        <argsstring>(stream::Packet &amp;&amp;p)</argsstring>
        <name>write_packet</name>
        <param>
          <type>stream::Packet &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="112" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="397" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1device_1a150d3328ca009fe27a19ad429494a9de" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::device::on_read</definition>
        <argsstring>(stream::Packet &amp;&amp;p)</argsstring>
        <name>on_read</name>
        <param>
          <type>stream::Packet &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/device.hpp" line="113" column="1" bodyfile="lib/telegraph/local/device.cpp" bodystart="405" bodyend="421"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="113">
        <label>telegraph::context</label>
        <link refid="classtelegraph_1_1context"/>
        <childnode refid="114" relation="public-inheritance">
        </childnode>
      </node>
      <node id="112">
        <label>telegraph::local_context</label>
        <link refid="classtelegraph_1_1local__context"/>
        <childnode refid="113" relation="public-inheritance">
        </childnode>
      </node>
      <node id="114">
        <label>std::enable_shared_from_this&lt; context &gt;</label>
      </node>
      <node id="111">
        <label>telegraph::device</label>
        <link refid="classtelegraph_1_1device"/>
        <childnode refid="112" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="120">
        <label>telegraph::params</label>
        <link refid="classtelegraph_1_1params"/>
      </node>
      <node id="117">
        <label>telegraph::context</label>
        <link refid="classtelegraph_1_1context"/>
        <childnode refid="118" relation="public-inheritance">
        </childnode>
        <childnode refid="119" relation="usage">
          <edgelabel>destroyed</edgelabel>
        </childnode>
        <childnode refid="120" relation="usage">
          <edgelabel>params_</edgelabel>
        </childnode>
      </node>
      <node id="116">
        <label>telegraph::local_context</label>
        <link refid="classtelegraph_1_1local__context"/>
        <childnode refid="117" relation="public-inheritance">
        </childnode>
      </node>
      <node id="118">
        <label>std::enable_shared_from_this&lt; context &gt;</label>
      </node>
      <node id="115">
        <label>telegraph::device</label>
        <link refid="classtelegraph_1_1device"/>
        <childnode refid="116" relation="public-inheritance">
        </childnode>
      </node>
      <node id="119">
        <label>telegraph::signal&lt; T &gt;</label>
        <link refid="classtelegraph_1_1signal"/>
      </node>
    </collaborationgraph>
    <location file="lib/telegraph/local/device.hpp" line="25" column="1" bodyfile="lib/telegraph/local/device.hpp" bodystart="25" bodyend="114"/>
    <listofallmembers>
      <member refid="classtelegraph_1_1device_1a0c2869fcfd0d94a10e2ef8474e54f50a" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>adapters_</name></member>
      <member refid="classtelegraph_1_1device_1ac6558ddeed4799f4d69428863363a1e6" prot="public" virt="virtual"><scope>telegraph::device</scope><name>call</name></member>
      <member refid="classtelegraph_1_1device_1a581368ab8f35ef72db17d2e330ded068" prot="public" virt="virtual"><scope>telegraph::device</scope><name>call</name></member>
      <member refid="classtelegraph_1_1context_1ad57ca6ff5da9ad653c688e7be3c0bbdc" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>context</name></member>
      <member refid="classtelegraph_1_1device_1a4bb333fc0232bdb69283e71f086028c4" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>create</name></member>
      <member refid="classtelegraph_1_1device_1a8d619b64e89b2ae933b282dc05956d37" prot="public" virt="virtual"><scope>telegraph::device</scope><name>destroy</name></member>
      <member refid="classtelegraph_1_1context_1aeae90cedad8326dcd9d6180d1058a10f" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>destroyed</name></member>
      <member refid="classtelegraph_1_1device_1a439a2eae3e8fceab20e87dea027dd912" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>device</name></member>
      <member refid="classtelegraph_1_1device_1a130aa6479bff1bd4cf730620116a1578" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>do_reading</name></member>
      <member refid="classtelegraph_1_1device_1a6dba9a47790dd28f922db63724c607f1" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>do_write_next</name></member>
      <member refid="classtelegraph_1_1local__context_1aefadafdf25e6f6ba23c4b332872836e2" prot="public" virt="virtual"><scope>telegraph::device</scope><name>fetch</name></member>
      <member refid="classtelegraph_1_1context_1a5df9df51fb9fc54d69e4a7d43e66345a" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>get_executor</name></member>
      <member refid="classtelegraph_1_1context_1a56bd2af5bbfcdc234f6dd8df052585d7" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>get_name</name></member>
      <member refid="classtelegraph_1_1local__context_1a71a19090a93c3193615e61940fba918a" prot="public" virt="virtual"><scope>telegraph::device</scope><name>get_namespace</name></member>
      <member refid="classtelegraph_1_1local__context_1aba1ff115df4b54bae75ea41580ba32b5" prot="public" virt="virtual"><scope>telegraph::device</scope><name>get_namespace</name></member>
      <member refid="classtelegraph_1_1context_1ab8f2cf6a295d840f8011ff1b5533a1f8" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>get_params</name></member>
      <member refid="classtelegraph_1_1context_1a07d07a63d22454c2dc900c5cf749ce18" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>get_type</name></member>
      <member refid="classtelegraph_1_1context_1adfc55d7a2ba9d68c1f52abcbac7d74fd" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>get_uuid</name></member>
      <member refid="classtelegraph_1_1context_1a5053f72fe2b58e264a0ce00de2727953" prot="protected" virt="non-virtual"><scope>telegraph::device</scope><name>headless_</name></member>
      <member refid="classtelegraph_1_1device_1a2f56da47b6e816ac9fd3b1ff2db5d2c9" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>init</name></member>
      <member refid="classtelegraph_1_1context_1a51949d83373c67e0c9e1050127df30c1" prot="protected" virt="non-virtual"><scope>telegraph::device</scope><name>ioc_</name></member>
      <member refid="classtelegraph_1_1context_1a4cfaa125584e2f5ee5121c074bc024f1" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>is_headless</name></member>
      <member refid="classtelegraph_1_1local__context_1a2f6fe87993dd07754131c5248c98c11d" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>local_context</name></member>
      <member refid="classtelegraph_1_1context_1a19b7cc6a4c3cf53d79e07fc78573fc31" prot="protected" virt="non-virtual"><scope>telegraph::device</scope><name>name_</name></member>
      <member refid="classtelegraph_1_1local__context_1a4ad057dd5bede6236b3af44a18577831" prot="protected" virt="non-virtual"><scope>telegraph::device</scope><name>ns_</name></member>
      <member refid="classtelegraph_1_1device_1ad96de759839056b7be491da0998f7115" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>on_read</name></member>
      <member refid="classtelegraph_1_1device_1a150d3328ca009fe27a19ad429494a9de" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>on_read</name></member>
      <member refid="classtelegraph_1_1context_1aa80ae462af488940258d71ccb6435b33" prot="protected" virt="non-virtual"><scope>telegraph::device</scope><name>params_</name></member>
      <member refid="classtelegraph_1_1device_1ad95bc183c659c9a6fbca7030a28536a7" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>port_</name></member>
      <member refid="classtelegraph_1_1device_1a4c46c7e98bf5a573a9966fd2cc199021" prot="public" virt="virtual"><scope>telegraph::device</scope><name>query_data</name></member>
      <member refid="classtelegraph_1_1device_1a9a5ef799aadf591a355cc1e50442d762" prot="public" virt="virtual"><scope>telegraph::device</scope><name>query_data</name></member>
      <member refid="classtelegraph_1_1device_1a5319409f8f9859ed56df9369b2596122" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>read_buf_</name></member>
      <member refid="classtelegraph_1_1local__context_1ab64632b088982a5f994708db99690f4f" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>reg</name></member>
      <member refid="classtelegraph_1_1device_1a7b757fe926660465e746d0f218dbc23e" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>req_id_</name></member>
      <member refid="classtelegraph_1_1device_1a43c185f8aad0a1d021ca94327d6e849b" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>reqs_</name></member>
      <member refid="classtelegraph_1_1device_1a9e5042e4640035b28dd9de780d7326df" prot="public" virt="virtual"><scope>telegraph::device</scope><name>request</name></member>
      <member refid="classtelegraph_1_1device_1af30e3bc32bf3d6b2b8e5f2c8a1a528e2" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>shared_device_this</name></member>
      <member refid="classtelegraph_1_1device_1ab0117f6015f904afae72d6ab90c8ad95" prot="public" virt="virtual"><scope>telegraph::device</scope><name>subscribe</name></member>
      <member refid="classtelegraph_1_1device_1aedf52d2dbb133e2b71958c116671b9df" prot="public" virt="virtual"><scope>telegraph::device</scope><name>subscribe</name></member>
      <member refid="classtelegraph_1_1local__context_1a16ab8680bd633b8b8554960bb8c48498" prot="protected" virt="non-virtual"><scope>telegraph::device</scope><name>tree_</name></member>
      <member refid="classtelegraph_1_1context_1af1cab34ed3278340157e25d828bb6c77" prot="protected" virt="non-virtual"><scope>telegraph::device</scope><name>type_</name></member>
      <member refid="classtelegraph_1_1context_1a0bf1873b5a611776d48b3e854e9e3589" prot="protected" virt="non-virtual"><scope>telegraph::device</scope><name>uuid_</name></member>
      <member refid="classtelegraph_1_1device_1ad6c50a1e9bd8c9bb022ebf13b24b7e78" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>weak_device_this</name></member>
      <member refid="classtelegraph_1_1device_1af59b858e123094a0c3d31958bc1b70eb" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>write_buf_</name></member>
      <member refid="classtelegraph_1_1device_1a60150e55bc6fb63d27252051caf462db" prot="public" virt="virtual"><scope>telegraph::device</scope><name>write_data</name></member>
      <member refid="classtelegraph_1_1device_1aaedca7b20bc36f8439d5afccbcaf1304" prot="public" virt="virtual"><scope>telegraph::device</scope><name>write_data</name></member>
      <member refid="classtelegraph_1_1device_1a714dd7269a70fa2989463fdff7ab6255" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>write_packet</name></member>
      <member refid="classtelegraph_1_1device_1a6f1242dc2dc03ccb421da753192ffec9" prot="private" virt="non-virtual"><scope>telegraph::device</scope><name>write_queue_</name></member>
      <member refid="classtelegraph_1_1device_1a55d99b0a3df689b60480a54ebaab6a44" prot="public" virt="non-virtual"><scope>telegraph::device</scope><name>~device</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
