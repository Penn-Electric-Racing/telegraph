<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtelegraph_1_1collection" kind="class" language="C++" prot="public">
    <compoundname>telegraph::collection</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; collection&lt; T &gt; &gt;</basecompoundref>
    <includes refid="collection_8hpp" local="no">collection.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtelegraph_1_1collection_1a7d1c05b1bdcbe95a3127122969e14173" prot="public" static="no">
        <type>typename <ref refid="structtelegraph_1_1collection__key" kindref="compound">collection_key</ref>&lt; T &gt;::type</type>
        <definition>using telegraph::collection&lt; T &gt;::key =  typename collection_key&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="30" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtelegraph_1_1collection_1adc4b39375104049b59bd3f817ae5177e" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classtelegraph_1_1collection" kindref="compound">collection</ref> &gt;</type>
        <definition>std::shared_ptr&lt;collection&gt; telegraph::collection&lt; T &gt;::src_</definition>
        <argsstring></argsstring>
        <name>src_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="27" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1collection_1a8e78aaa3e116412b093812835fdc5eaa" prot="private" static="no" mutable="no">
        <type>std::function&lt; bool(const T &amp;)&gt;</type>
        <definition>std::function&lt;bool(const T&amp;)&gt; telegraph::collection&lt; T &gt;::filter_</definition>
        <argsstring></argsstring>
        <name>filter_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="28" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtelegraph_1_1collection_1a7ac59f0f85680539f80d085dd35b3c47" prot="public" static="no" mutable="no">
        <type><ref refid="classtelegraph_1_1signal" kindref="compound">signal</ref>&lt; const T &amp; &gt;</type>
        <definition>signal&lt;const T&amp;&gt; telegraph::collection&lt; T &gt;::added</definition>
        <argsstring></argsstring>
        <name>added</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="33" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1collection_1a6fdb7502f6cef02065c6bbde435756f0" prot="public" static="no" mutable="no">
        <type><ref refid="classtelegraph_1_1signal" kindref="compound">signal</ref>&lt; const T &amp; &gt;</type>
        <definition>signal&lt;const T&amp;&gt; telegraph::collection&lt; T &gt;::removed</definition>
        <argsstring></argsstring>
        <name>removed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="34" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1collection_1a5a6329136af41edba2e17fddaaa5384c" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="classtelegraph_1_1collection_1a7d1c05b1bdcbe95a3127122969e14173" kindref="member">key</ref>, T &gt;</type>
        <definition>std::unordered_map&lt;key, T&gt; telegraph::collection&lt; T &gt;::current</definition>
        <argsstring></argsstring>
        <name>current</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="36" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtelegraph_1_1collection_1a226e589bb9d07937a82843f5da0610a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>telegraph::collection&lt; T &gt;::collection</definition>
        <argsstring>()</argsstring>
        <name>collection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="38" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1a4ce0e224a982a6025015a1ef7008ca56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>telegraph::collection&lt; T &gt;::collection</definition>
        <argsstring>(const std::shared_ptr&lt; collection &gt; &amp;src, const std::function&lt; bool(const T &amp;)&gt; &amp;filter)</argsstring>
        <name>collection</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classtelegraph_1_1collection" kindref="compound">collection</ref> &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::function&lt; bool(const T &amp;)&gt; &amp;</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="39" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="39" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1afa7564c9896fde9d965f422f8ee6a4ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classtelegraph_1_1collection" kindref="compound">collection</ref> &gt;</type>
        <definition>std::shared_ptr&lt;collection&gt; telegraph::collection&lt; T &gt;::filter</definition>
        <argsstring>(const std::function&lt; bool(const T &amp;)&gt; &amp;f)</argsstring>
        <name>filter</name>
        <param>
          <type>const std::function&lt; bool(const T &amp;)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="51" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="51" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1af9b482ee7d179bd7c4dfa47fba1df507" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool telegraph::collection&lt; T &gt;::has</definition>
        <argsstring>(const key &amp;k) const</argsstring>
        <name>has</name>
        <param>
          <type>const <ref refid="classtelegraph_1_1collection_1a7d1c05b1bdcbe95a3127122969e14173" kindref="member">key</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="59" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1ae51a6f64a8c24e2c602e6c3c4865249a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t telegraph::collection&lt; T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="63" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1ac3c0fd37e9000e9de5ba9c3aeee330c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; telegraph::collection&lt; T &gt;::result</definition>
        <argsstring>() const</argsstring>
        <name>result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="67" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="67" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1a3065b252176bd28f4280ad0384276e3e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T telegraph::collection&lt; T &gt;::get</definition>
        <argsstring>(const key &amp;k) const</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="classtelegraph_1_1collection_1a7d1c05b1bdcbe95a3127122969e14173" kindref="member">key</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="73" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1af8383989a761fdd14631dd6c0e574298" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::collection&lt; T &gt;::add_</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>add_</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="81" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="81" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1ab736aff469340ac47c12c6b84ac9fd4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::collection&lt; T &gt;::remove_</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>remove_</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="90" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1a0e9199b87fb87d2602fc6e4cc33835c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::collection&lt; T &gt;::remove_by_key_</definition>
        <argsstring>(const key &amp;k)</argsstring>
        <name>remove_by_key_</name>
        <param>
          <type>const <ref refid="classtelegraph_1_1collection_1a7d1c05b1bdcbe95a3127122969e14173" kindref="member">key</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="99" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1a0bebe64fbda6ce9af9922531879099c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_map&lt; <ref refid="classtelegraph_1_1collection_1a7d1c05b1bdcbe95a3127122969e14173" kindref="member">key</ref>, T &gt;::iterator</type>
        <definition>std::unordered_map&lt;key, T&gt;::iterator telegraph::collection&lt; T &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="105" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1a262da7d56b726b69ddee3de30f086066" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_map&lt; <ref refid="classtelegraph_1_1collection_1a7d1c05b1bdcbe95a3127122969e14173" kindref="member">key</ref>, T &gt;::iterator</type>
        <definition>std::unordered_map&lt;key, T&gt;::iterator telegraph::collection&lt; T &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="106" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1a14b2edf6043f717d568342a1a7575132" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_map&lt; <ref refid="classtelegraph_1_1collection_1a7d1c05b1bdcbe95a3127122969e14173" kindref="member">key</ref>, T &gt;::iterator</type>
        <definition>std::unordered_map&lt;key, T&gt;::iterator telegraph::collection&lt; T &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="107" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1collection_1ae8833bbd79ee1d4bc8c4d4c949fc4532" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_map&lt; <ref refid="classtelegraph_1_1collection_1a7d1c05b1bdcbe95a3127122969e14173" kindref="member">key</ref>, T &gt;::iterator</type>
        <definition>std::unordered_map&lt;key, T&gt;::iterator telegraph::collection&lt; T &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/collection.hpp" line="108" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="108" bodyend="108"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="61">
        <label>telegraph::collection&lt; T &gt;</label>
        <link refid="classtelegraph_1_1collection"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
      </node>
      <node id="62">
        <label>std::enable_shared_from_this&lt; collection&lt; T &gt; &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="65">
        <label>telegraph::signal&lt; const T &amp;&gt;</label>
        <link refid="classtelegraph_1_1signal"/>
      </node>
      <node id="63">
        <label>telegraph::collection&lt; T &gt;</label>
        <link refid="classtelegraph_1_1collection"/>
        <childnode refid="64" relation="public-inheritance">
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>added</edgelabel>
          <edgelabel>removed</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>std::enable_shared_from_this&lt; collection&lt; T &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="lib/telegraph/common/collection.hpp" line="25" column="1" bodyfile="lib/telegraph/common/collection.hpp" bodystart="25" bodyend="109"/>
    <listofallmembers>
      <member refid="classtelegraph_1_1collection_1af8383989a761fdd14631dd6c0e574298" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>add_</name></member>
      <member refid="classtelegraph_1_1collection_1a7ac59f0f85680539f80d085dd35b3c47" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>added</name></member>
      <member refid="classtelegraph_1_1collection_1a0bebe64fbda6ce9af9922531879099c3" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>begin</name></member>
      <member refid="classtelegraph_1_1collection_1a262da7d56b726b69ddee3de30f086066" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>begin</name></member>
      <member refid="classtelegraph_1_1collection_1a226e589bb9d07937a82843f5da0610a0" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>collection</name></member>
      <member refid="classtelegraph_1_1collection_1a4ce0e224a982a6025015a1ef7008ca56" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>collection</name></member>
      <member refid="classtelegraph_1_1collection_1a5a6329136af41edba2e17fddaaa5384c" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>current</name></member>
      <member refid="classtelegraph_1_1collection_1a14b2edf6043f717d568342a1a7575132" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>end</name></member>
      <member refid="classtelegraph_1_1collection_1ae8833bbd79ee1d4bc8c4d4c949fc4532" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>end</name></member>
      <member refid="classtelegraph_1_1collection_1afa7564c9896fde9d965f422f8ee6a4ce" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>filter</name></member>
      <member refid="classtelegraph_1_1collection_1a8e78aaa3e116412b093812835fdc5eaa" prot="private" virt="non-virtual"><scope>telegraph::collection</scope><name>filter_</name></member>
      <member refid="classtelegraph_1_1collection_1a3065b252176bd28f4280ad0384276e3e" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>get</name></member>
      <member refid="classtelegraph_1_1collection_1af9b482ee7d179bd7c4dfa47fba1df507" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>has</name></member>
      <member refid="classtelegraph_1_1collection_1a7d1c05b1bdcbe95a3127122969e14173" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>key</name></member>
      <member refid="classtelegraph_1_1collection_1ab736aff469340ac47c12c6b84ac9fd4d" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>remove_</name></member>
      <member refid="classtelegraph_1_1collection_1a0e9199b87fb87d2602fc6e4cc33835c7" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>remove_by_key_</name></member>
      <member refid="classtelegraph_1_1collection_1a6fdb7502f6cef02065c6bbde435756f0" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>removed</name></member>
      <member refid="classtelegraph_1_1collection_1ac3c0fd37e9000e9de5ba9c3aeee330c1" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>result</name></member>
      <member refid="classtelegraph_1_1collection_1ae51a6f64a8c24e2c602e6c3c4865249a" prot="public" virt="non-virtual"><scope>telegraph::collection</scope><name>size</name></member>
      <member refid="classtelegraph_1_1collection_1adc4b39375104049b59bd3f817ae5177e" prot="private" virt="non-virtual"><scope>telegraph::collection</scope><name>src_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
