<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtelegraph_1_1group" kind="class" language="C++" prot="public">
    <compoundname>telegraph::group</compoundname>
    <basecompoundref refid="classtelegraph_1_1node" prot="public" virt="non-virtual">telegraph::node</basecompoundref>
    <includes refid="lib_2telegraph_2common_2nodes_8hpp" local="no">nodes.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtelegraph_1_1group_1a20be44d56ddcba7a8322aa88f4149ee4" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string telegraph::group::schema_</definition>
        <argsstring></argsstring>
        <name>schema_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="237" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1group_1a04df9e8cc0f1c5253689e8397fdd4cb7" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int telegraph::group::version_</definition>
        <argsstring></argsstring>
        <name>version_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="238" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1group_1a7a3a9179c626a2a4d270279ddd7bfeca" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> * &gt;</type>
        <definition>std::vector&lt;node*&gt; telegraph::group::children_</definition>
        <argsstring></argsstring>
        <name>children_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="240" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1group_1ac1325af71de4f4238bb9432a79f8b74b" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *, std::less&lt;&gt; &gt;</type>
        <definition>std::map&lt;std::string, node*, std::less&lt;&gt; &gt; telegraph::group::children_map_</definition>
        <argsstring></argsstring>
        <name>children_map_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="241" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="241" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtelegraph_1_1group_1a06ec96e471690fcc8e9cc6efe1632261" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>telegraph::group::group</definition>
        <argsstring>(id i, const std::string_view &amp;name, const std::string_view &amp;pretty, const std::string_view &amp;desc, const std::string_view &amp;schema, int version, std::vector&lt; node *&gt; &amp;&amp;children)</argsstring>
        <name>group</name>
        <param>
          <type><ref refid="classtelegraph_1_1node_1a90bc576d668ed141d5354a06aa9c8d9a" kindref="member">id</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>pretty</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>int</type>
          <declname>version</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *&gt; &amp;&amp;</type>
          <declname>children</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="113" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="113" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a88d584b6dc7383e319a00fc266b29be7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>telegraph::group::group</definition>
        <argsstring>(const group &amp;g)</argsstring>
        <name>group</name>
        <param>
          <type>const <ref refid="classtelegraph_1_1group" kindref="compound">group</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="125" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="125" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a2c613f213d32b7b48b94df99610bbc90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>telegraph::group::~group</definition>
        <argsstring>()</argsstring>
        <name>~group</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="137" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a6ab1978bc6c97d3dcd802665c92390b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; telegraph::group::get_schema</definition>
        <argsstring>() const</argsstring>
        <name>get_schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="141" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a04e3ffe2ee3b18f0c2d921bdd8b0789f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int telegraph::group::get_version</definition>
        <argsstring>() const</argsstring>
        <name>get_version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="142" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1ae4887f80cadba073aef9feef1295fb20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void telegraph::group::set_owner</definition>
        <argsstring>(const std::weak_ptr&lt; context &gt; &amp;c) override</argsstring>
        <name>set_owner</name>
        <reimplements refid="classtelegraph_1_1node_1a6d864584bfadd3520194066f8b62812b">set_owner</reimplements>
        <param>
          <type>const std::weak_ptr&lt; <ref refid="classtelegraph_1_1context" kindref="compound">context</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="144" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1af56fb03ad97aadd9be32c5e47c6d195b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void telegraph::group::set_unowned</definition>
        <argsstring>() override</argsstring>
        <name>set_unowned</name>
        <reimplements refid="classtelegraph_1_1node_1ac0bbcb9d810a2cca87b120301c0972a0">set_unowned</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="149" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a27e8f2ecfe0b87fef8ca57c43fda8809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>node* telegraph::group::from_path</definition>
        <argsstring>(const std::vector&lt; std::string_view &gt; &amp;p, size_t idx=0) override</argsstring>
        <name>from_path</name>
        <reimplements refid="classtelegraph_1_1node_1a2d5ea5366a04f3b3841de9bc21e70416">from_path</reimplements>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="154" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="154" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1ad4ed6177fee328ec3702d01a881a33ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>const node* telegraph::group::from_path</definition>
        <argsstring>(const std::vector&lt; std::string_view &gt; &amp;p, size_t idx=0) const override</argsstring>
        <name>from_path</name>
        <reimplements refid="classtelegraph_1_1node_1aaba33e2aa28a99dcd8f4b1888c3a5706">from_path</reimplements>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="164" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="164" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a120c05f05d045fe4b5719b4abe4e83d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> * &gt;</type>
        <definition>std::vector&lt;node*&gt; telegraph::group::nodes</definition>
        <argsstring>() override</argsstring>
        <name>nodes</name>
        <reimplements refid="classtelegraph_1_1node_1a14eb2051c1efaf4de6684d3e50aebeb7">nodes</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="175" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="175" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1ad5a82543eef530a7b07ca2cdbe6a82f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; const <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> * &gt;</type>
        <definition>std::vector&lt;const node*&gt; telegraph::group::nodes</definition>
        <argsstring>() const override</argsstring>
        <name>nodes</name>
        <reimplements refid="classtelegraph_1_1node_1a9d19888a9a73a4623dcab55be6386395">nodes</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="185" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="185" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1aaf32eea781de1f18d37765793589dda5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>node* telegraph::group::operator[]</definition>
        <argsstring>(size_t idx) override</argsstring>
        <name>operator[]</name>
        <reimplements refid="classtelegraph_1_1node_1ad82c9a9af7b7cf132db1c1e74f09254f">operator[]</reimplements>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="196" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a1b084997076f624d3814b057b26162cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>const node* telegraph::group::operator[]</definition>
        <argsstring>(size_t idx) const override</argsstring>
        <name>operator[]</name>
        <reimplements refid="classtelegraph_1_1node_1a4a2a451694b0a4b2c4ec26eee02e46ad">operator[]</reimplements>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="200" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a84db0dc9c8d45bdd343a0d4da44a3593" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>node* telegraph::group::operator[]</definition>
        <argsstring>(const std::string &amp;child) override</argsstring>
        <name>operator[]</name>
        <reimplements refid="classtelegraph_1_1node_1a3cf657c57fe639f6288f2acdd9b50e3c">operator[]</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="204" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="204" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1abc407505a0b1d0f1c3de0f588f8ea7a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>const node* telegraph::group::operator[]</definition>
        <argsstring>(const std::string &amp;child) const override</argsstring>
        <name>operator[]</name>
        <reimplements refid="classtelegraph_1_1node_1aad6b0bbccc9831f82117a1cc03493f6c">operator[]</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="211" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="211" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a71c8576e9cf6035fd371516b1e1fc692" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> * &gt;::iterator</type>
        <definition>std::vector&lt;node*&gt;::iterator telegraph::group::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="218" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a0ec680f2044108436dbecc8f25b2cba6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> * &gt;::const_iterator</type>
        <definition>std::vector&lt;node*&gt;::const_iterator telegraph::group::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="219" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="219" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1afe980e1a055ebba5eb236cf09738bad8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> * &gt;::iterator</type>
        <definition>std::vector&lt;node*&gt;::iterator telegraph::group::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="220" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="220" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1ab06ca45e8bd109f94d2ea763c92de677" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> * &gt;::const_iterator</type>
        <definition>std::vector&lt;node*&gt;::const_iterator telegraph::group::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="221" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a75e3d657ee7458aeedfcc353bd50e571" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t telegraph::group::num_children</definition>
        <argsstring>() const</argsstring>
        <name>num_children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="223" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a63cf8362b39b718e9553a519485f7875" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool telegraph::group::compatible_with</definition>
        <argsstring>(node *other) const override</argsstring>
        <name>compatible_with</name>
        <reimplements refid="classtelegraph_1_1node_1a68c4aed1434da1f0ece9089ff99ffcdb">compatible_with</reimplements>
        <param>
          <type><ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="225" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="41" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a2899f0bebaa9696675c7a32fd92d54e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::group::pack</definition>
        <argsstring>(Group *group) const</argsstring>
        <name>pack</name>
        <param>
          <type>Group *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="227" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="58" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a070decfe980bb669646af5307f5c93e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void telegraph::group::pack</definition>
        <argsstring>(Node *proto) const override</argsstring>
        <name>pack</name>
        <reimplements refid="classtelegraph_1_1node_1a5006b21e9b83ecd52f3f953a1b828773">pack</reimplements>
        <param>
          <type>Node *</type>
          <declname>proto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="228" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1group_1a0e937eea18e4f650b892ac9061c461fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &gt;</type>
        <definition>std::unique_ptr&lt;node&gt; telegraph::group::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classtelegraph_1_1node_1ae90515f4573cfa43c168cba9d542df6b">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="231" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="231" bodyend="233"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtelegraph_1_1group_1a92934fab7dc94207f4d98a40deef0f55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtelegraph_1_1group" kindref="compound">group</ref> *</type>
        <definition>group * telegraph::group::unpack</definition>
        <argsstring>(const Group &amp;g)</argsstring>
        <name>unpack</name>
        <param>
          <type>const Group &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="229" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="75" bodyend="83"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtelegraph_1_1group_1a07fdf83c8e9de01ed6950aa218315961" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void telegraph::group::print</definition>
        <argsstring>(std::ostream &amp;o, int ident=0) const override</argsstring>
        <name>print</name>
        <reimplements refid="classtelegraph_1_1node_1a70ae6b3d07132abcc4022a7ac9facf6b">print</reimplements>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ident</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="235" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="86" bodyend="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="174">
        <label>telegraph::node</label>
        <link refid="classtelegraph_1_1node"/>
      </node>
      <node id="173">
        <label>telegraph::group</label>
        <link refid="classtelegraph_1_1group"/>
        <childnode refid="174" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="176">
        <label>telegraph::node</label>
        <link refid="classtelegraph_1_1node"/>
        <childnode refid="175" relation="usage">
          <edgelabel>parent_</edgelabel>
        </childnode>
      </node>
      <node id="175">
        <label>telegraph::group</label>
        <link refid="classtelegraph_1_1group"/>
        <childnode refid="176" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="lib/telegraph/common/nodes.hpp" line="111" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="111" bodyend="242"/>
    <listofallmembers>
      <member refid="classtelegraph_1_1group_1a71c8576e9cf6035fd371516b1e1fc692" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>begin</name></member>
      <member refid="classtelegraph_1_1group_1a0ec680f2044108436dbecc8f25b2cba6" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>begin</name></member>
      <member refid="classtelegraph_1_1group_1a7a3a9179c626a2a4d270279ddd7bfeca" prot="private" virt="non-virtual"><scope>telegraph::group</scope><name>children_</name></member>
      <member refid="classtelegraph_1_1group_1ac1325af71de4f4238bb9432a79f8b74b" prot="private" virt="non-virtual"><scope>telegraph::group</scope><name>children_map_</name></member>
      <member refid="classtelegraph_1_1group_1a0e937eea18e4f650b892ac9061c461fa" prot="public" virt="virtual"><scope>telegraph::group</scope><name>clone</name></member>
      <member refid="classtelegraph_1_1group_1a63cf8362b39b718e9553a519485f7875" prot="public" virt="virtual"><scope>telegraph::group</scope><name>compatible_with</name></member>
      <member refid="classtelegraph_1_1node_1ade724e97cdd76b83c5de499b62f91ecb" prot="protected" virt="non-virtual"><scope>telegraph::group</scope><name>desc_</name></member>
      <member refid="classtelegraph_1_1group_1afe980e1a055ebba5eb236cf09738bad8" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>end</name></member>
      <member refid="classtelegraph_1_1group_1ab06ca45e8bd109f94d2ea763c92de677" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>end</name></member>
      <member refid="classtelegraph_1_1group_1a27e8f2ecfe0b87fef8ca57c43fda8809" prot="public" virt="virtual"><scope>telegraph::group</scope><name>from_path</name></member>
      <member refid="classtelegraph_1_1group_1ad4ed6177fee328ec3702d01a881a33ee" prot="public" virt="virtual"><scope>telegraph::group</scope><name>from_path</name></member>
      <member refid="classtelegraph_1_1node_1aff9478f841f7f791af1cd60513877440" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>get_desc</name></member>
      <member refid="classtelegraph_1_1node_1a8067bd46e650371084576234acfb8289" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>get_id</name></member>
      <member refid="classtelegraph_1_1node_1af33c56a0a2d2340c9cae412017a4fa4f" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>get_name</name></member>
      <member refid="classtelegraph_1_1node_1a2bcd9175c2e3b667422d86fc6fcc9959" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>get_parent</name></member>
      <member refid="classtelegraph_1_1node_1adb0c016733fe55621b061d4e81d296fa" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>get_parent</name></member>
      <member refid="classtelegraph_1_1node_1abeaa41162d9369bc6fc8bcbabe9d23e3" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>get_pretty</name></member>
      <member refid="classtelegraph_1_1group_1a6ab1978bc6c97d3dcd802665c92390b8" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>get_schema</name></member>
      <member refid="classtelegraph_1_1group_1a04e3ffe2ee3b18f0c2d921bdd8b0789f" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>get_version</name></member>
      <member refid="classtelegraph_1_1group_1a06ec96e471690fcc8e9cc6efe1632261" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>group</name></member>
      <member refid="classtelegraph_1_1group_1a88d584b6dc7383e319a00fc266b29be7" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>group</name></member>
      <member refid="classtelegraph_1_1node_1a90bc576d668ed141d5354a06aa9c8d9a" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>id</name></member>
      <member refid="classtelegraph_1_1node_1abbc7178e6f854f475ac04fab89afe8ed" prot="protected" virt="non-virtual"><scope>telegraph::group</scope><name>id_</name></member>
      <member refid="classtelegraph_1_1node_1a14e3a8896e5cda1ad3e91186009e4a83" prot="protected" virt="non-virtual"><scope>telegraph::group</scope><name>name_</name></member>
      <member refid="classtelegraph_1_1node_1a6891eb034aa7d988f1459d3ed2bc0106" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>node</name></member>
      <member refid="classtelegraph_1_1node_1a76746ee2232620309c5f60ca94af24ee" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>node</name></member>
      <member refid="classtelegraph_1_1group_1a120c05f05d045fe4b5719b4abe4e83d9" prot="public" virt="virtual"><scope>telegraph::group</scope><name>nodes</name></member>
      <member refid="classtelegraph_1_1group_1ad5a82543eef530a7b07ca2cdbe6a82f5" prot="public" virt="virtual"><scope>telegraph::group</scope><name>nodes</name></member>
      <member refid="classtelegraph_1_1group_1a75e3d657ee7458aeedfcc353bd50e571" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>num_children</name></member>
      <member refid="classtelegraph_1_1node_1aa7aacc23330b9b8f98b05f8155481de7" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>operator=</name></member>
      <member refid="classtelegraph_1_1group_1aaf32eea781de1f18d37765793589dda5" prot="public" virt="virtual"><scope>telegraph::group</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1group_1a1b084997076f624d3814b057b26162cd" prot="public" virt="virtual"><scope>telegraph::group</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1group_1a84db0dc9c8d45bdd343a0d4da44a3593" prot="public" virt="virtual"><scope>telegraph::group</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1group_1abc407505a0b1d0f1c3de0f588f8ea7a0" prot="public" virt="virtual"><scope>telegraph::group</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1node_1a5419854e28d2b852ecaf964849220f9f" prot="protected" virt="non-virtual"><scope>telegraph::group</scope><name>owner_</name></member>
      <member refid="classtelegraph_1_1group_1a2899f0bebaa9696675c7a32fd92d54e9" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>pack</name></member>
      <member refid="classtelegraph_1_1group_1a070decfe980bb669646af5307f5c93e4" prot="public" virt="virtual"><scope>telegraph::group</scope><name>pack</name></member>
      <member refid="classtelegraph_1_1node_1a875057ad03af20786456cffe6d5b22d9" prot="protected" virt="non-virtual"><scope>telegraph::group</scope><name>parent_</name></member>
      <member refid="classtelegraph_1_1node_1a1f1a005517baad53ec2407c27a13c9c4" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>path</name></member>
      <member refid="classtelegraph_1_1node_1a6d308459f7de904b54a1a551b3be5cb7" prot="protected" virt="non-virtual"><scope>telegraph::group</scope><name>pretty_</name></member>
      <member refid="classtelegraph_1_1group_1a07fdf83c8e9de01ed6950aa218315961" prot="private" virt="virtual"><scope>telegraph::group</scope><name>print</name></member>
      <member refid="classtelegraph_1_1group_1a20be44d56ddcba7a8322aa88f4149ee4" prot="private" virt="non-virtual"><scope>telegraph::group</scope><name>schema_</name></member>
      <member refid="classtelegraph_1_1group_1ae4887f80cadba073aef9feef1295fb20" prot="public" virt="virtual"><scope>telegraph::group</scope><name>set_owner</name></member>
      <member refid="classtelegraph_1_1node_1ae0f1bd6f97ea3e1f21940a7eebb70fab" prot="protected" virt="non-virtual"><scope>telegraph::group</scope><name>set_parent</name></member>
      <member refid="classtelegraph_1_1group_1af56fb03ad97aadd9be32c5e47c6d195b" prot="public" virt="virtual"><scope>telegraph::group</scope><name>set_unowned</name></member>
      <member refid="classtelegraph_1_1node_1a3cb6dfaddab4d5953c04bb5ec348763b" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>topic</name></member>
      <member refid="classtelegraph_1_1group_1a92934fab7dc94207f4d98a40deef0f55" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>unpack</name></member>
      <member refid="classtelegraph_1_1node_1a2a2ddaf1b7210b1e69f63adcc1d83fa5" prot="public" virt="non-virtual" ambiguityscope="telegraph::node::"><scope>telegraph::group</scope><name>unpack</name></member>
      <member refid="classtelegraph_1_1group_1a04df9e8cc0f1c5253689e8397fdd4cb7" prot="private" virt="non-virtual"><scope>telegraph::group</scope><name>version_</name></member>
      <member refid="classtelegraph_1_1group_1a2c613f213d32b7b48b94df99610bbc90" prot="public" virt="non-virtual"><scope>telegraph::group</scope><name>~group</name></member>
      <member refid="classtelegraph_1_1node_1a7fe858c56729feae1e92625ff4827209" prot="public" virt="virtual"><scope>telegraph::group</scope><name>~node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
