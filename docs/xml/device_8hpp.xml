<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="device_8hpp" kind="file" language="C++">
    <compoundname>device.hpp</compoundname>
    <includes refid="local_2namespace_8hpp" local="yes">namespace.hpp</includes>
    <includes refid="params_8hpp" local="yes">../common/params.hpp</includes>
    <includes refid="adapter_8hpp" local="yes">../common/adapter.hpp</includes>
    <includes refid="lib_2telegraph_2common_2nodes_8hpp" local="yes">../common/nodes.hpp</includes>
    <includes refid="io__fwd_8hpp" local="yes">../utils/io_fwd.hpp</includes>
    <includes local="no">string</includes>
    <includes local="no">memory</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">deque</includes>
    <includes local="no">boost/asio/deadline_timer.hpp</includes>
    <includes local="no">boost/asio/serial_port.hpp</includes>
    <includes local="no">boost/asio/streambuf.hpp</includes>
    <includes local="yes">stream.pb.h</includes>
    <includedby refid="device_8cpp" local="yes">device.cpp</includedby>
    <includedby refid="main_2server_8cpp" local="no">server.cpp</includedby>
    <incdepgraph>
      <node id="365">
        <label>boost/asio/deadline_timer.hpp</label>
      </node>
      <node id="355">
        <label>params.hpp</label>
        <link refid="params_8hpp"/>
        <childnode refid="343" relation="include">
        </childnode>
        <childnode refid="351" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
        <childnode refid="356" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
        <childnode refid="340" relation="include">
        </childnode>
        <childnode refid="337" relation="include">
        </childnode>
      </node>
      <node id="341">
        <label>functional</label>
      </node>
      <node id="329">
        <label>context.hpp</label>
      </node>
      <node id="333">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="346">
        <label>value.hpp</label>
        <link refid="lib_2telegraph_2common_2value_8hpp"/>
        <childnode refid="347" relation="include">
        </childnode>
        <childnode refid="348" relation="include">
        </childnode>
        <childnode refid="349" relation="include">
        </childnode>
        <childnode refid="350" relation="include">
        </childnode>
        <childnode refid="352" relation="include">
        </childnode>
      </node>
      <node id="350">
        <label>type.hpp</label>
        <link refid="type_8hpp"/>
        <childnode refid="351" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
        <childnode refid="352" relation="include">
        </childnode>
      </node>
      <node id="356">
        <label>variant</label>
      </node>
      <node id="334">
        <label>../utils/errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="335" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
      </node>
      <node id="337">
        <label>../utils/io_fwd.hpp</label>
        <link refid="io__fwd_8hpp"/>
      </node>
      <node id="340">
        <label>../utils/signal.hpp</label>
        <link refid="signal_8hpp"/>
        <childnode refid="341" relation="include">
        </childnode>
        <childnode refid="342" relation="include">
        </childnode>
        <childnode refid="343" relation="include">
        </childnode>
      </node>
      <node id="347">
        <label>string</label>
      </node>
      <node id="348">
        <label>cinttypes</label>
      </node>
      <node id="343">
        <label>map</label>
      </node>
      <node id="360">
        <label>unordered_set</label>
      </node>
      <node id="361">
        <label>../utils/io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="362" relation="include">
        </childnode>
        <childnode refid="363" relation="include">
        </childnode>
      </node>
      <node id="366">
        <label>../common/nodes.hpp</label>
        <link refid="lib_2telegraph_2common_2nodes_8hpp"/>
        <childnode refid="350" relation="include">
        </childnode>
        <childnode refid="346" relation="include">
        </childnode>
        <childnode refid="353" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="351" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
        <childnode refid="343" relation="include">
        </childnode>
        <childnode refid="352" relation="include">
        </childnode>
      </node>
      <node id="335">
        <label>exception</label>
      </node>
      <node id="364">
        <label>boost/asio/error.hpp</label>
      </node>
      <node id="349">
        <label>ostream</label>
      </node>
      <node id="330">
        <label>../utils/uuid.hpp</label>
        <link refid="uuid_8hpp"/>
        <childnode refid="331" relation="include">
        </childnode>
        <childnode refid="332" relation="include">
        </childnode>
        <childnode refid="333" relation="include">
        </childnode>
      </node>
      <node id="336">
        <label>string_view</label>
      </node>
      <node id="352">
        <label>common.pb.h</label>
      </node>
      <node id="363">
        <label>boost/asio/io_context.hpp</label>
      </node>
      <node id="327">
        <label>device.hpp</label>
        <link refid="device_8hpp"/>
        <childnode refid="328" relation="include">
        </childnode>
        <childnode refid="355" relation="include">
        </childnode>
        <childnode refid="358" relation="include">
        </childnode>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="337" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="359" relation="include">
        </childnode>
        <childnode refid="365" relation="include">
        </childnode>
        <childnode refid="367" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
        <childnode refid="369" relation="include">
        </childnode>
      </node>
      <node id="332">
        <label>boost/uuid/random_generator.hpp</label>
      </node>
      <node id="369">
        <label>stream.pb.h</label>
      </node>
      <node id="357">
        <label>optional</label>
      </node>
      <node id="368">
        <label>boost/asio/streambuf.hpp</label>
      </node>
      <node id="351">
        <label>vector</label>
      </node>
      <node id="338">
        <label>../common/namespace.hpp</label>
        <link refid="common_2namespace_8hpp"/>
        <childnode refid="339" relation="include">
        </childnode>
        <childnode refid="346" relation="include">
        </childnode>
        <childnode refid="353" relation="include">
        </childnode>
        <childnode refid="355" relation="include">
        </childnode>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="337" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="357" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
      </node>
      <node id="339">
        <label>collection.hpp</label>
        <link refid="collection_8hpp"/>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="340" relation="include">
        </childnode>
        <childnode refid="337" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="341" relation="include">
        </childnode>
        <childnode refid="345" relation="include">
        </childnode>
      </node>
      <node id="328">
        <label>namespace.hpp</label>
        <link refid="local_2namespace_8hpp"/>
        <childnode refid="329" relation="include">
        </childnode>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
        <childnode refid="337" relation="include">
        </childnode>
        <childnode refid="338" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
        <childnode refid="343" relation="include">
        </childnode>
        <childnode refid="341" relation="include">
        </childnode>
      </node>
      <node id="359">
        <label>deque</label>
      </node>
      <node id="345">
        <label>unordered_map</label>
      </node>
      <node id="342">
        <label>mutex</label>
      </node>
      <node id="354">
        <label>chrono</label>
      </node>
      <node id="358">
        <label>../common/adapter.hpp</label>
        <link refid="adapter_8hpp"/>
        <childnode refid="359" relation="include">
        </childnode>
        <childnode refid="341" relation="include">
        </childnode>
        <childnode refid="360" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="353" relation="include">
        </childnode>
        <childnode refid="361" relation="include">
        </childnode>
        <childnode refid="364" relation="include">
        </childnode>
        <childnode refid="365" relation="include">
        </childnode>
      </node>
      <node id="331">
        <label>boost/uuid/uuid.hpp</label>
      </node>
      <node id="367">
        <label>boost/asio/serial_port.hpp</label>
      </node>
      <node id="362">
        <label>boost/asio/spawn.hpp</label>
      </node>
      <node id="353">
        <label>data.hpp</label>
        <link refid="data_8hpp"/>
        <childnode refid="350" relation="include">
        </childnode>
        <childnode refid="346" relation="include">
        </childnode>
        <childnode refid="340" relation="include">
        </childnode>
        <childnode refid="337" relation="include">
        </childnode>
        <childnode refid="348" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="354" relation="include">
        </childnode>
      </node>
      <node id="344">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="370">
        <label>device.hpp</label>
        <link refid="device_8hpp"/>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
      </node>
      <node id="371">
        <label>device.cpp</label>
        <link refid="device_8cpp"/>
      </node>
      <node id="372">
        <label>server.cpp</label>
        <link refid="main_2server_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classtelegraph_1_1device" prot="public">telegraph::device</innerclass>
    <innerclass refid="structtelegraph_1_1device_1_1req" prot="private">telegraph::device::req</innerclass>
    <innerclass refid="classtelegraph_1_1device__scanner" prot="public">telegraph::device_scanner</innerclass>
    <innernamespace refid="namespacetelegraph">telegraph</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__TELEGRAPH_LOCAL_DEVICE_HPP__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__TELEGRAPH_LOCAL_DEVICE_HPP__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="local_2namespace_8hpp" kindref="compound">namespace.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../common/params.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../common/adapter.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../common/nodes.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../utils/io_fwd.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/asio/deadline_timer.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/asio/serial_port.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/asio/streambuf.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stream.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetelegraph" kindref="compound">telegraph</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">device_io_worker;</highlight></codeline>
<codeline lineno="25" refid="classtelegraph_1_1device" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtelegraph_1_1device" kindref="compound">device</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1local__context" kindref="compound">local_context</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::deque&lt;stream::Packet&gt;<sp/>write_queue_;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>io::streambuf<sp/>write_buf_;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>io::streambuf<sp/>read_buf_;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>req_id_;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">req<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>io::deadline_timer*<sp/>timer;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream::Packet*<sp/>packet;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>req(io::deadline_timer*<sp/>t,<sp/>stream::Packet*<sp/>p)<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>timer(t),<sp/>packet(p)<sp/>{}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;uint32_t,<sp/>req&gt;<sp/>reqs_;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subscription<sp/>adapters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;node::id,<sp/>std::shared_ptr&lt;adapter_base&gt;&gt;<sp/>adapters_;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>io::serial_port<sp/>port_;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtelegraph_1_1device_1a439a2eae3e8fceab20e87dea027dd912" kindref="member">device</ref>(io::io_context&amp;<sp/>ioc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>port,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>baud);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtelegraph_1_1device_1a55d99b0a3df689b60480a54ebaab6a44" kindref="member">~device</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>should<sp/>be<sp/>called<sp/>right<sp/>after<sp/>construction!<sp/>(this<sp/>is<sp/>done<sp/>by<sp/>create)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>the<sp/>context<sp/>will<sp/>not<sp/>have<sp/>a<sp/>tree<sp/>(this<sp/>is<sp/>done<sp/>by<sp/>device_io_task)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1device_1a2f56da47b6e816ac9fd3b1ff2db5d2c9" kindref="member">init</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>millisec_timeout);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>querying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classtelegraph_1_1device_1a9e5042e4640035b28dd9de780d7326df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetelegraph_1ad071241508ea0f86c7de0686016f9ca9" kindref="member">params_stream_ptr</ref><sp/><ref refid="classtelegraph_1_1device_1a9e5042e4640035b28dd9de780d7326df" kindref="member">request</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1params" kindref="compound">params</ref>&amp;<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetelegraph_1a58641aa5b1a2cbdb0431916a87069f64" kindref="member">subscription_ptr</ref><sp/><ref refid="classtelegraph_1_1device_1ab0117f6015f904afae72d6ab90c8ad95" kindref="member">subscribe</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref>*<sp/>v,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_interval,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_interval,<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeout)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtelegraph_1_1value" kindref="compound">value</ref><sp/><ref refid="classtelegraph_1_1device_1ac6558ddeed4799f4d69428863363a1e6" kindref="member">call</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;<sp/>ctx,<sp/><ref refid="classtelegraph_1_1action" kindref="compound">action</ref>*<sp/>a,<sp/><ref refid="classtelegraph_1_1value" kindref="compound">value</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeout);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1device_1a8d619b64e89b2ae933b282dc05956d37" kindref="member">destroy</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;<sp/>ctx)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>path-based<sp/>overloads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="classtelegraph_1_1device_1aedf52d2dbb133e2b71958c116671b9df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetelegraph_1a58641aa5b1a2cbdb0431916a87069f64" kindref="member">subscription_ptr</ref><sp/><ref refid="classtelegraph_1_1device_1aedf52d2dbb133e2b71958c116671b9df" kindref="member">subscribe</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;<sp/>ctx,<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string_view&gt;&amp;<sp/>path,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_interval,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_interval,<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeout)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><sp/><ref refid="classtelegraph_1_1local__context_1a16ab8680bd633b8b8554960bb8c48498" kindref="member">tree_</ref>-&gt;from_path(path);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1device_1ab0117f6015f904afae72d6ab90c8ad95" kindref="member">subscribe</ref>(ctx,<sp/>v,<sp/>min_interval,<sp/>max_interval,<sp/>timeout);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classtelegraph_1_1device_1a581368ab8f35ef72db17d2e330ded068" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtelegraph_1_1value" kindref="compound">value</ref><sp/><ref refid="classtelegraph_1_1device_1a581368ab8f35ef72db17d2e330ded068" kindref="member">call</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;<sp/>ctx,<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string_view&gt;&amp;<sp/>path,<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtelegraph_1_1value" kindref="compound">value</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeout)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classtelegraph_1_1action" kindref="compound">action</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classtelegraph_1_1local__context_1a16ab8680bd633b8b8554960bb8c48498" kindref="member">tree_</ref>-&gt;from_path(path));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1value_1a68b0f771058facdf968ff62de354b881" kindref="member">value::invalid</ref>();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1device_1ac6558ddeed4799f4d69428863363a1e6" kindref="member">call</ref>(ctx,<sp/>a,<sp/>v,<sp/>timeout);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unimplemented<sp/>context<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classtelegraph_1_1device_1a60150e55bc6fb63d27252051caf462db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1device_1a60150e55bc6fb63d27252051caf462db" kindref="member">write_data</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;,<sp/><ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref>*<sp/>v,<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;data_point&gt;&amp;<sp/>d)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classtelegraph_1_1device_1aaedca7b20bc36f8439d5afccbcaf1304" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1device_1aaedca7b20bc36f8439d5afccbcaf1304" kindref="member">write_data</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;,<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string_view&gt;&amp;<sp/>path,<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;data_point&gt;&amp;<sp/>d)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="classtelegraph_1_1device_1a4c46c7e98bf5a573a9966fd2cc199021" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetelegraph_1a6ffe775ac48dca2a4013b53d692199c8" kindref="member">data_query_ptr</ref><sp/><ref refid="classtelegraph_1_1device_1a4c46c7e98bf5a573a9966fd2cc199021" kindref="member">query_data</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;<sp/>yield,<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1variable" kindref="compound">variable</ref><sp/>*<sp/>n)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="92" refid="classtelegraph_1_1device_1a9a5ef799aadf591a355cc1e50442d762" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetelegraph_1a6ffe775ac48dca2a4013b53d692199c8" kindref="member">data_query_ptr</ref><sp/><ref refid="classtelegraph_1_1device_1a9a5ef799aadf591a355cc1e50442d762" kindref="member">query_data</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;<sp/>yield,<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string_view&gt;&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacetelegraph_1ab59c7b38d99a98b4acc22433c920b1e6" kindref="member">local_context_ptr</ref><sp/><ref refid="classtelegraph_1_1device_1a4bb333fc0232bdb69283e71f086028c4" kindref="member">create</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;,<sp/>io::io_context&amp;<sp/>ioc,<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view&amp;<sp/>type,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1params" kindref="compound">params</ref>&amp;<sp/>p);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;device&gt;<sp/>shared_device_this()<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::static_pointer_cast&lt;<ref refid="classtelegraph_1_1device" kindref="compound">device</ref>&gt;(shared_from_this());</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::weak_ptr&lt;device&gt;<sp/>weak_device_this()<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::weak_ptr&lt;device&gt;{std::static_pointer_cast&lt;<ref refid="classtelegraph_1_1device" kindref="compound">device</ref>&gt;(shared_from_this())};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>queue<sp/>a<sp/>write<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>from<sp/>within<sp/>the<sp/>port<sp/>executing<sp/>strand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_reading(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>requested<sp/>=<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>requested<sp/>of<sp/>0<sp/>just<sp/>read<sp/>any<sp/>amount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_read(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::system::error_code&amp;<sp/>ec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>transferred);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_write_next();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_packet(stream::Packet&amp;&amp;<sp/>p);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_read(stream::Packet&amp;&amp;<sp/>p);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classtelegraph_1_1device__scanner" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtelegraph_1_1device__scanner" kindref="compound">device_scanner</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1local__component" kindref="compound">local_component</ref><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;<ref refid="classtelegraph_1_1params__stream" kindref="compound">params_stream</ref>*,<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::weak_ptr&lt;params_stream&gt;&gt;<sp/>requests_;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>last_devices_;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtelegraph_1_1device__scanner" kindref="compound">device_scanner</ref>(io::io_context&amp;<sp/>ioc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view&amp;<sp/>name);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="classtelegraph_1_1device__scanner" kindref="compound">device_scanner</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1device_1a2f56da47b6e816ac9fd3b1ff2db5d2c9" kindref="member">init</ref>();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetelegraph_1ad071241508ea0f86c7de0686016f9ca9" kindref="member">params_stream_ptr</ref><sp/><ref refid="classtelegraph_1_1device_1a9e5042e4640035b28dd9de780d7326df" kindref="member">request</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1params" kindref="compound">params</ref>&amp;<sp/>p)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacetelegraph_1a69cfb42be07c9189123cfa3ff3ec4487" kindref="member">local_component_ptr</ref><sp/><ref refid="classtelegraph_1_1device_1a4bb333fc0232bdb69283e71f086028c4" kindref="member">create</ref>(<ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref>&amp;,<sp/>io::io_context&amp;<sp/>ioc,<sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view&amp;<sp/>type,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtelegraph_1_1params" kindref="compound">params</ref>&amp;<sp/>p);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="lib/telegraph/local/device.hpp"/>
  </compounddef>
</doxygen>
