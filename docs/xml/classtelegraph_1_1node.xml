<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtelegraph_1_1node" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>telegraph::node</compoundname>
    <derivedcompoundref refid="classtelegraph_1_1action" prot="public" virt="non-virtual">telegraph::action</derivedcompoundref>
    <derivedcompoundref refid="classtelegraph_1_1group" prot="public" virt="non-virtual">telegraph::group</derivedcompoundref>
    <derivedcompoundref refid="classtelegraph_1_1variable" prot="public" virt="non-virtual">telegraph::variable</derivedcompoundref>
    <includes refid="lib_2telegraph_2common_2nodes_8hpp" local="no">nodes.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtelegraph_1_1node_1a90bc576d668ed141d5354a06aa9c8d9a" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using telegraph::node::id =  uint16_t</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="29" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtelegraph_1_1node_1a76660c1d4ef8b0607d06f1512fc85da2" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend telegraph::node::group</definition>
        <argsstring></argsstring>
        <name>group</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="27" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classtelegraph_1_1node_1abbc7178e6f854f475ac04fab89afe8ed" prot="protected" static="no" mutable="no">
        <type><ref refid="classtelegraph_1_1node_1a90bc576d668ed141d5354a06aa9c8d9a" kindref="member">id</ref></type>
        <definition>id telegraph::node::id_</definition>
        <argsstring></argsstring>
        <name>id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="96" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1node_1a14e3a8896e5cda1ad3e91186009e4a83" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string telegraph::node::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="97" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1node_1a6d308459f7de904b54a1a551b3be5cb7" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string telegraph::node::pretty_</definition>
        <argsstring></argsstring>
        <name>pretty_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="98" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1node_1ade724e97cdd76b83c5de499b62f91ecb" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string telegraph::node::desc_</definition>
        <argsstring></argsstring>
        <name>desc_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="99" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1node_1a875057ad03af20786456cffe6d5b22d9" prot="protected" static="no" mutable="no">
        <type><ref refid="classtelegraph_1_1group" kindref="compound">group</ref> *</type>
        <definition>group* telegraph::node::parent_</definition>
        <argsstring></argsstring>
        <name>parent_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="101" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1node_1a5419854e28d2b852ecaf964849220f9f" prot="protected" static="no" mutable="no">
        <type>std::weak_ptr&lt; <ref refid="classtelegraph_1_1context" kindref="compound">context</ref> &gt;</type>
        <definition>std::weak_ptr&lt;context&gt; telegraph::node::owner_</definition>
        <argsstring></argsstring>
        <name>owner_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="102" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtelegraph_1_1node_1ac75a0e79c8f8f6dfa9fa8cd9d438325f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const node &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>o</defname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &amp;</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="26" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="106" bodyend="109"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtelegraph_1_1node_1a6891eb034aa7d988f1459d3ed2bc0106" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>telegraph::node::node</definition>
        <argsstring>(id i, const std::string_view &amp;name, const std::string_view &amp;pretty, const std::string_view &amp;desc)</argsstring>
        <name>node</name>
        <param>
          <type><ref refid="classtelegraph_1_1node_1a90bc576d668ed141d5354a06aa9c8d9a" kindref="member">id</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>pretty</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="30" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a76746ee2232620309c5f60ca94af24ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>telegraph::node::node</definition>
        <argsstring>(const node &amp;n)</argsstring>
        <name>node</name>
        <param>
          <type>const <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="34" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a7fe858c56729feae1e92625ff4827209" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual telegraph::node::~node</definition>
        <argsstring>()</argsstring>
        <name>~node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="37" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1aa7aacc23330b9b8f98b05f8155481de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &amp;</type>
        <definition>node&amp; telegraph::node::operator=</definition>
        <argsstring>(const node &amp;n)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a8067bd46e650371084576234acfb8289" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classtelegraph_1_1node_1a90bc576d668ed141d5354a06aa9c8d9a" kindref="member">id</ref></type>
        <definition>constexpr const id telegraph::node::get_id</definition>
        <argsstring>() const</argsstring>
        <name>get_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="41" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1af33c56a0a2d2340c9cae412017a4fa4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const std::string &amp;</type>
        <definition>constexpr const std::string&amp; telegraph::node::get_name</definition>
        <argsstring>() const</argsstring>
        <name>get_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="42" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1abeaa41162d9369bc6fc8bcbabe9d23e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const std::string &amp;</type>
        <definition>constexpr const std::string&amp; telegraph::node::get_pretty</definition>
        <argsstring>() const</argsstring>
        <name>get_pretty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="43" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1aff9478f841f7f791af1cd60513877440" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const std::string &amp;</type>
        <definition>constexpr const std::string&amp; telegraph::node::get_desc</definition>
        <argsstring>() const</argsstring>
        <name>get_desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="44" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a2bcd9175c2e3b667422d86fc6fcc9959" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classtelegraph_1_1group" kindref="compound">group</ref> *</type>
        <definition>constexpr group* telegraph::node::get_parent</definition>
        <argsstring>()</argsstring>
        <name>get_parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="46" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1adb0c016733fe55621b061d4e81d296fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classtelegraph_1_1group" kindref="compound">group</ref> *</type>
        <definition>constexpr const group* telegraph::node::get_parent</definition>
        <argsstring>() const</argsstring>
        <name>get_parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="47" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a3cb6dfaddab4d5953c04bb5ec348763b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string telegraph::node::topic</definition>
        <argsstring>() const</argsstring>
        <name>topic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="50" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="6" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a1f1a005517baad53ec2407c27a13c9c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; telegraph::node::path</definition>
        <argsstring>() const</argsstring>
        <name>path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="51" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="11" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a2d5ea5366a04f3b3841de9bc21e70416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>virtual node* telegraph::node::from_path</definition>
        <argsstring>(const std::vector&lt; std::string_view &gt; &amp;p, size_t idx=0)</argsstring>
        <name>from_path</name>
        <reimplementedby refid="classtelegraph_1_1group_1a27e8f2ecfe0b87fef8ca57c43fda8809">from_path</reimplementedby>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="54" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1aaba33e2aa28a99dcd8f4b1888c3a5706" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>virtual const node* telegraph::node::from_path</definition>
        <argsstring>(const std::vector&lt; std::string_view &gt; &amp;p, size_t idx=0) const</argsstring>
        <name>from_path</name>
        <reimplementedby refid="classtelegraph_1_1group_1ad4ed6177fee328ec3702d01a881a33ee">from_path</reimplementedby>
        <param>
          <type>const std::vector&lt; std::string_view &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="58" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a14eb2051c1efaf4de6684d3e50aebeb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> * &gt;</type>
        <definition>virtual std::vector&lt;node*&gt; telegraph::node::nodes</definition>
        <argsstring>()</argsstring>
        <name>nodes</name>
        <reimplementedby refid="classtelegraph_1_1group_1a120c05f05d045fe4b5719b4abe4e83d9">nodes</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="62" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a9d19888a9a73a4623dcab55be6386395" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; const <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> * &gt;</type>
        <definition>virtual std::vector&lt;const node*&gt; telegraph::node::nodes</definition>
        <argsstring>() const</argsstring>
        <name>nodes</name>
        <reimplementedby refid="classtelegraph_1_1group_1ad5a82543eef530a7b07ca2cdbe6a82f5">nodes</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="67" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="67" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1ad82c9a9af7b7cf132db1c1e74f09254f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>virtual node* telegraph::node::operator[]</definition>
        <argsstring>(size_t idx)</argsstring>
        <name>operator[]</name>
        <reimplementedby refid="classtelegraph_1_1group_1aaf32eea781de1f18d37765793589dda5">operator[]</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="72" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a4a2a451694b0a4b2c4ec26eee02e46ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>virtual const node* telegraph::node::operator[]</definition>
        <argsstring>(size_t idx) const</argsstring>
        <name>operator[]</name>
        <reimplementedby refid="classtelegraph_1_1group_1a1b084997076f624d3814b057b26162cd">operator[]</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="73" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a3cf657c57fe639f6288f2acdd9b50e3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>virtual node* telegraph::node::operator[]</definition>
        <argsstring>(const std::string &amp;child)</argsstring>
        <name>operator[]</name>
        <reimplementedby refid="classtelegraph_1_1group_1a84db0dc9c8d45bdd343a0d4da44a3593">operator[]</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="74" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1aad6b0bbccc9831f82117a1cc03493f6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>virtual const node* telegraph::node::operator[]</definition>
        <argsstring>(const std::string &amp;child) const</argsstring>
        <name>operator[]</name>
        <reimplementedby refid="classtelegraph_1_1group_1abc407505a0b1d0f1c3de0f588f8ea7a0">operator[]</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="75" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a6d864584bfadd3520194066f8b62812b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void telegraph::node::set_owner</definition>
        <argsstring>(const std::weak_ptr&lt; context &gt; &amp;c)</argsstring>
        <name>set_owner</name>
        <reimplementedby refid="classtelegraph_1_1group_1ae4887f80cadba073aef9feef1295fb20">set_owner</reimplementedby>
        <param>
          <type>const std::weak_ptr&lt; <ref refid="classtelegraph_1_1context" kindref="compound">context</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="77" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1ac0bbcb9d810a2cca87b120301c0972a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void telegraph::node::set_unowned</definition>
        <argsstring>()</argsstring>
        <name>set_unowned</name>
        <reimplementedby refid="classtelegraph_1_1group_1af56fb03ad97aadd9be32c5e47c6d195b">set_unowned</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="83" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a68c4aed1434da1f0ece9089ff99ffcdb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool telegraph::node::compatible_with</definition>
        <argsstring>(node *other) const =0</argsstring>
        <name>compatible_with</name>
        <reimplementedby refid="classtelegraph_1_1group_1a63cf8362b39b718e9553a519485f7875">compatible_with</reimplementedby>
        <reimplementedby refid="classtelegraph_1_1variable_1a4075427712d7286318b8ee7bb8c207b8">compatible_with</reimplementedby>
        <reimplementedby refid="classtelegraph_1_1action_1a372bd4f9c1b7b4698e151448d5c28af9">compatible_with</reimplementedby>
        <param>
          <type><ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a5006b21e9b83ecd52f3f953a1b828773" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void telegraph::node::pack</definition>
        <argsstring>(Node *proto) const =0</argsstring>
        <name>pack</name>
        <reimplementedby refid="classtelegraph_1_1group_1a070decfe980bb669646af5307f5c93e4">pack</reimplementedby>
        <reimplementedby refid="classtelegraph_1_1variable_1a3016d192f7d4328cf1f32273f9431d83">pack</reimplementedby>
        <reimplementedby refid="classtelegraph_1_1action_1a849370efc692c6c4e7047e3b9c50983c">pack</reimplementedby>
        <param>
          <type>Node *</type>
          <declname>proto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1ae90515f4573cfa43c168cba9d542df6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unique_ptr&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &gt;</type>
        <definition>virtual std::unique_ptr&lt;node&gt; telegraph::node::clone</definition>
        <argsstring>() const =0</argsstring>
        <name>clone</name>
        <reimplementedby refid="classtelegraph_1_1group_1a0e937eea18e4f650b892ac9061c461fa">clone</reimplementedby>
        <reimplementedby refid="classtelegraph_1_1variable_1a25d2ba4ae52c2bcad99a34b84ce7407b">clone</reimplementedby>
        <reimplementedby refid="classtelegraph_1_1action_1aa72bffae4f241be8a4366e3c7344a17b">clone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="91" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtelegraph_1_1node_1a2a2ddaf1b7210b1e69f63adcc1d83fa5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
        <definition>node * telegraph::node::unpack</definition>
        <argsstring>(const Node &amp;proto)</argsstring>
        <name>unpack</name>
        <param>
          <type>const Node &amp;</type>
          <declname>proto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="89" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="24" bodyend="31"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtelegraph_1_1node_1ae0f1bd6f97ea3e1f21940a7eebb70fab" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void telegraph::node::set_parent</definition>
        <argsstring>(group *g)</argsstring>
        <name>set_parent</name>
        <param>
          <type><ref refid="classtelegraph_1_1group" kindref="compound">group</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="93" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1node_1a70ae6b3d07132abcc4022a7ac9facf6b" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void telegraph::node::print</definition>
        <argsstring>(std::ostream &amp;o, int ident=0) const</argsstring>
        <name>print</name>
        <reimplementedby refid="classtelegraph_1_1group_1a07fdf83c8e9de01ed6950aa218315961">print</reimplementedby>
        <reimplementedby refid="classtelegraph_1_1variable_1a73d1f0f5c963e0a9faf35a587b9c34ce">print</reimplementedby>
        <reimplementedby refid="classtelegraph_1_1action_1a15007857dfc5f7d455f227c14be7a5a2">print</reimplementedby>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ident</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="94" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="34" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="286">
        <label>telegraph::action</label>
        <link refid="classtelegraph_1_1action"/>
        <childnode refid="285" relation="public-inheritance">
        </childnode>
      </node>
      <node id="285">
        <label>telegraph::node</label>
        <link refid="classtelegraph_1_1node"/>
      </node>
      <node id="287">
        <label>telegraph::group</label>
        <link refid="classtelegraph_1_1group"/>
        <childnode refid="285" relation="public-inheritance">
        </childnode>
      </node>
      <node id="288">
        <label>telegraph::variable</label>
        <link refid="classtelegraph_1_1variable"/>
        <childnode refid="285" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="289">
        <label>telegraph::node</label>
        <link refid="classtelegraph_1_1node"/>
        <childnode refid="290" relation="usage">
          <edgelabel>parent_</edgelabel>
        </childnode>
      </node>
      <node id="290">
        <label>telegraph::group</label>
        <link refid="classtelegraph_1_1group"/>
        <childnode refid="289" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="lib/telegraph/common/nodes.hpp" line="25" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="25" bodyend="103"/>
    <listofallmembers>
      <member refid="classtelegraph_1_1node_1ae90515f4573cfa43c168cba9d542df6b" prot="public" virt="pure-virtual"><scope>telegraph::node</scope><name>clone</name></member>
      <member refid="classtelegraph_1_1node_1a68c4aed1434da1f0ece9089ff99ffcdb" prot="public" virt="pure-virtual"><scope>telegraph::node</scope><name>compatible_with</name></member>
      <member refid="classtelegraph_1_1node_1ade724e97cdd76b83c5de499b62f91ecb" prot="protected" virt="non-virtual"><scope>telegraph::node</scope><name>desc_</name></member>
      <member refid="classtelegraph_1_1node_1a2d5ea5366a04f3b3841de9bc21e70416" prot="public" virt="virtual"><scope>telegraph::node</scope><name>from_path</name></member>
      <member refid="classtelegraph_1_1node_1aaba33e2aa28a99dcd8f4b1888c3a5706" prot="public" virt="virtual"><scope>telegraph::node</scope><name>from_path</name></member>
      <member refid="classtelegraph_1_1node_1aff9478f841f7f791af1cd60513877440" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>get_desc</name></member>
      <member refid="classtelegraph_1_1node_1a8067bd46e650371084576234acfb8289" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>get_id</name></member>
      <member refid="classtelegraph_1_1node_1af33c56a0a2d2340c9cae412017a4fa4f" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>get_name</name></member>
      <member refid="classtelegraph_1_1node_1a2bcd9175c2e3b667422d86fc6fcc9959" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>get_parent</name></member>
      <member refid="classtelegraph_1_1node_1adb0c016733fe55621b061d4e81d296fa" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>get_parent</name></member>
      <member refid="classtelegraph_1_1node_1abeaa41162d9369bc6fc8bcbabe9d23e3" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>get_pretty</name></member>
      <member refid="classtelegraph_1_1node_1a76660c1d4ef8b0607d06f1512fc85da2" prot="private" virt="non-virtual"><scope>telegraph::node</scope><name>group</name></member>
      <member refid="classtelegraph_1_1node_1a90bc576d668ed141d5354a06aa9c8d9a" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>id</name></member>
      <member refid="classtelegraph_1_1node_1abbc7178e6f854f475ac04fab89afe8ed" prot="protected" virt="non-virtual"><scope>telegraph::node</scope><name>id_</name></member>
      <member refid="classtelegraph_1_1node_1a14e3a8896e5cda1ad3e91186009e4a83" prot="protected" virt="non-virtual"><scope>telegraph::node</scope><name>name_</name></member>
      <member refid="classtelegraph_1_1node_1a6891eb034aa7d988f1459d3ed2bc0106" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>node</name></member>
      <member refid="classtelegraph_1_1node_1a76746ee2232620309c5f60ca94af24ee" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>node</name></member>
      <member refid="classtelegraph_1_1node_1a14eb2051c1efaf4de6684d3e50aebeb7" prot="public" virt="virtual"><scope>telegraph::node</scope><name>nodes</name></member>
      <member refid="classtelegraph_1_1node_1a9d19888a9a73a4623dcab55be6386395" prot="public" virt="virtual"><scope>telegraph::node</scope><name>nodes</name></member>
      <member refid="classtelegraph_1_1node_1ac75a0e79c8f8f6dfa9fa8cd9d438325f" prot="private" virt="non-virtual"><scope>telegraph::node</scope><name>operator&lt;&lt;</name></member>
      <member refid="classtelegraph_1_1node_1aa7aacc23330b9b8f98b05f8155481de7" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>operator=</name></member>
      <member refid="classtelegraph_1_1node_1ad82c9a9af7b7cf132db1c1e74f09254f" prot="public" virt="virtual"><scope>telegraph::node</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1node_1a4a2a451694b0a4b2c4ec26eee02e46ad" prot="public" virt="virtual"><scope>telegraph::node</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1node_1a3cf657c57fe639f6288f2acdd9b50e3c" prot="public" virt="virtual"><scope>telegraph::node</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1node_1aad6b0bbccc9831f82117a1cc03493f6c" prot="public" virt="virtual"><scope>telegraph::node</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1node_1a5419854e28d2b852ecaf964849220f9f" prot="protected" virt="non-virtual"><scope>telegraph::node</scope><name>owner_</name></member>
      <member refid="classtelegraph_1_1node_1a5006b21e9b83ecd52f3f953a1b828773" prot="public" virt="pure-virtual"><scope>telegraph::node</scope><name>pack</name></member>
      <member refid="classtelegraph_1_1node_1a875057ad03af20786456cffe6d5b22d9" prot="protected" virt="non-virtual"><scope>telegraph::node</scope><name>parent_</name></member>
      <member refid="classtelegraph_1_1node_1a1f1a005517baad53ec2407c27a13c9c4" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>path</name></member>
      <member refid="classtelegraph_1_1node_1a6d308459f7de904b54a1a551b3be5cb7" prot="protected" virt="non-virtual"><scope>telegraph::node</scope><name>pretty_</name></member>
      <member refid="classtelegraph_1_1node_1a70ae6b3d07132abcc4022a7ac9facf6b" prot="protected" virt="virtual"><scope>telegraph::node</scope><name>print</name></member>
      <member refid="classtelegraph_1_1node_1a6d864584bfadd3520194066f8b62812b" prot="public" virt="virtual"><scope>telegraph::node</scope><name>set_owner</name></member>
      <member refid="classtelegraph_1_1node_1ae0f1bd6f97ea3e1f21940a7eebb70fab" prot="protected" virt="non-virtual"><scope>telegraph::node</scope><name>set_parent</name></member>
      <member refid="classtelegraph_1_1node_1ac0bbcb9d810a2cca87b120301c0972a0" prot="public" virt="virtual"><scope>telegraph::node</scope><name>set_unowned</name></member>
      <member refid="classtelegraph_1_1node_1a3cb6dfaddab4d5953c04bb5ec348763b" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>topic</name></member>
      <member refid="classtelegraph_1_1node_1a2a2ddaf1b7210b1e69f63adcc1d83fa5" prot="public" virt="non-virtual"><scope>telegraph::node</scope><name>unpack</name></member>
      <member refid="classtelegraph_1_1node_1a7fe858c56729feae1e92625ff4827209" prot="public" virt="virtual"><scope>telegraph::node</scope><name>~node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
