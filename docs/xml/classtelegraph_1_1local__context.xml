<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtelegraph_1_1local__context" kind="class" language="C++" prot="public">
    <compoundname>telegraph::local_context</compoundname>
    <basecompoundref refid="classtelegraph_1_1context" prot="public" virt="non-virtual">telegraph::context</basecompoundref>
    <derivedcompoundref refid="classtelegraph_1_1container" prot="public" virt="non-virtual">telegraph::container</derivedcompoundref>
    <derivedcompoundref refid="classtelegraph_1_1device" prot="public" virt="non-virtual">telegraph::device</derivedcompoundref>
    <derivedcompoundref refid="classtelegraph_1_1dummy__device" prot="public" virt="non-virtual">telegraph::dummy_device</derivedcompoundref>
    <derivedcompoundref refid="classtelegraph_1_1local__component" prot="public" virt="non-virtual">telegraph::local_component</derivedcompoundref>
    <derivedcompoundref refid="classtelegraph_1_1tmp__archive" prot="public" virt="non-virtual">telegraph::tmp_archive</derivedcompoundref>
    <includes refid="local_2namespace_8hpp" local="no">namespace.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classtelegraph_1_1local__context_1a16ab8680bd633b8b8554960bb8c48498" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &gt;</type>
        <definition>std::shared_ptr&lt;node&gt; telegraph::local_context::tree_</definition>
        <argsstring></argsstring>
        <name>tree_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="63" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1local__context_1a4ad057dd5bede6236b3af44a18577831" prot="protected" static="no" mutable="no">
        <type>std::weak_ptr&lt; <ref refid="classtelegraph_1_1local__namespace" kindref="compound">local_namespace</ref> &gt;</type>
        <definition>std::weak_ptr&lt;local_namespace&gt; telegraph::local_context::ns_</definition>
        <argsstring></argsstring>
        <name>ns_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="64" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtelegraph_1_1local__context_1a2f6fe87993dd07754131c5248c98c11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>telegraph::local_context::local_context</definition>
        <argsstring>(io::io_context &amp;ioc, const std::string_view &amp;name, const std::string_view &amp;type, const params &amp;i, const std::shared_ptr&lt; node &gt; &amp;tree, bool headless=false)</argsstring>
        <name>local_context</name>
        <param>
          <type>io::io_context &amp;</type>
          <declname>ioc</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1params" kindref="compound">params</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &gt; &amp;</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>headless</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="51" column="1" bodyfile="lib/telegraph/local/namespace.cpp" bodystart="34" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__context_1a71a19090a93c3193615e61940fba918a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classtelegraph_1_1namespace__" kindref="compound">namespace_</ref> &gt;</type>
        <definition>std::shared_ptr&lt;namespace_&gt; telegraph::local_context::get_namespace</definition>
        <argsstring>() override</argsstring>
        <name>get_namespace</name>
        <reimplements refid="classtelegraph_1_1context_1a84d92cca54be9c4e885e2673480e45a1">get_namespace</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="55" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__context_1aba1ff115df4b54bae75ea41580ba32b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; const <ref refid="classtelegraph_1_1namespace__" kindref="compound">namespace_</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const namespace_&gt; telegraph::local_context::get_namespace</definition>
        <argsstring>() const override</argsstring>
        <name>get_namespace</name>
        <reimplements refid="classtelegraph_1_1context_1a2f6c9ecc15cee66415828df9efa834a2">get_namespace</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="56" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__context_1ab64632b088982a5f994708db99690f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::local_context::reg</definition>
        <argsstring>(io::yield_ctx &amp;yield, const std::shared_ptr&lt; local_namespace &gt; &amp;ns)</argsstring>
        <name>reg</name>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classtelegraph_1_1local__namespace" kindref="compound">local_namespace</ref> &gt; &amp;</type>
          <declname>ns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="58" column="1" bodyfile="lib/telegraph/local/namespace.cpp" bodystart="44" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__context_1a301da16810636030a5098e4838587a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void telegraph::local_context::destroy</definition>
        <argsstring>(io::yield_ctx &amp;yield) override</argsstring>
        <name>destroy</name>
        <reimplements refid="classtelegraph_1_1context_1a4017c1bcd9c84170a5cb612ae45d6fb4">destroy</reimplements>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="59" column="1" bodyfile="lib/telegraph/local/namespace.cpp" bodystart="52" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1local__context_1aefadafdf25e6f6ba23c4b332872836e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &gt;</type>
        <definition>std::shared_ptr&lt;node&gt; telegraph::local_context::fetch</definition>
        <argsstring>(io::yield_ctx &amp;) override</argsstring>
        <name>fetch</name>
        <reimplements refid="classtelegraph_1_1context_1aa2c0321629f2d51c8bc5632e418b305f">fetch</reimplements>
        <reimplementedby refid="classtelegraph_1_1local__component_1abbeb3b12dc95e19e1a2972e9a374fd33">fetch</reimplementedby>
        <param>
          <type><ref refid="structboost_1_1asio_1_1yield__ctx" kindref="compound">io::yield_ctx</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/local/namespace.hpp" line="61" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="244">
        <label>telegraph::local_component</label>
        <link refid="classtelegraph_1_1local__component"/>
        <childnode refid="238" relation="public-inheritance">
        </childnode>
      </node>
      <node id="239">
        <label>telegraph::context</label>
        <link refid="classtelegraph_1_1context"/>
        <childnode refid="240" relation="public-inheritance">
        </childnode>
      </node>
      <node id="238">
        <label>telegraph::local_context</label>
        <link refid="classtelegraph_1_1local__context"/>
        <childnode refid="239" relation="public-inheritance">
        </childnode>
      </node>
      <node id="240">
        <label>std::enable_shared_from_this&lt; context &gt;</label>
      </node>
      <node id="241">
        <label>telegraph::container</label>
        <link refid="classtelegraph_1_1container"/>
        <childnode refid="238" relation="public-inheritance">
        </childnode>
      </node>
      <node id="245">
        <label>telegraph::device_scanner</label>
        <link refid="classtelegraph_1_1device__scanner"/>
        <childnode refid="244" relation="public-inheritance">
        </childnode>
      </node>
      <node id="242">
        <label>telegraph::device</label>
        <link refid="classtelegraph_1_1device"/>
        <childnode refid="238" relation="public-inheritance">
        </childnode>
      </node>
      <node id="246">
        <label>telegraph::tmp_archive</label>
        <link refid="classtelegraph_1_1tmp__archive"/>
        <childnode refid="238" relation="public-inheritance">
        </childnode>
      </node>
      <node id="243">
        <label>telegraph::dummy_device</label>
        <link refid="classtelegraph_1_1dummy__device"/>
        <childnode refid="238" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="251">
        <label>telegraph::params</label>
        <link refid="classtelegraph_1_1params"/>
      </node>
      <node id="248">
        <label>telegraph::context</label>
        <link refid="classtelegraph_1_1context"/>
        <childnode refid="249" relation="public-inheritance">
        </childnode>
        <childnode refid="250" relation="usage">
          <edgelabel>destroyed</edgelabel>
        </childnode>
        <childnode refid="251" relation="usage">
          <edgelabel>params_</edgelabel>
        </childnode>
      </node>
      <node id="247">
        <label>telegraph::local_context</label>
        <link refid="classtelegraph_1_1local__context"/>
        <childnode refid="248" relation="public-inheritance">
        </childnode>
      </node>
      <node id="249">
        <label>std::enable_shared_from_this&lt; context &gt;</label>
      </node>
      <node id="250">
        <label>telegraph::signal&lt; T &gt;</label>
        <link refid="classtelegraph_1_1signal"/>
      </node>
    </collaborationgraph>
    <location file="lib/telegraph/local/namespace.hpp" line="49" column="1" bodyfile="lib/telegraph/local/namespace.hpp" bodystart="49" bodyend="65"/>
    <listofallmembers>
      <member refid="classtelegraph_1_1context_1a72da471eb635e5505b10d2f1103359ac" prot="public" virt="pure-virtual"><scope>telegraph::local_context</scope><name>call</name></member>
      <member refid="classtelegraph_1_1context_1a0798d49ea0874a870d4c980f6f09b6c2" prot="public" virt="pure-virtual"><scope>telegraph::local_context</scope><name>call</name></member>
      <member refid="classtelegraph_1_1context_1ad57ca6ff5da9ad653c688e7be3c0bbdc" prot="public" virt="non-virtual"><scope>telegraph::local_context</scope><name>context</name></member>
      <member refid="classtelegraph_1_1local__context_1a301da16810636030a5098e4838587a99" prot="public" virt="virtual"><scope>telegraph::local_context</scope><name>destroy</name></member>
      <member refid="classtelegraph_1_1context_1aeae90cedad8326dcd9d6180d1058a10f" prot="public" virt="non-virtual"><scope>telegraph::local_context</scope><name>destroyed</name></member>
      <member refid="classtelegraph_1_1local__context_1aefadafdf25e6f6ba23c4b332872836e2" prot="public" virt="virtual"><scope>telegraph::local_context</scope><name>fetch</name></member>
      <member refid="classtelegraph_1_1context_1a5df9df51fb9fc54d69e4a7d43e66345a" prot="public" virt="non-virtual"><scope>telegraph::local_context</scope><name>get_executor</name></member>
      <member refid="classtelegraph_1_1context_1a56bd2af5bbfcdc234f6dd8df052585d7" prot="public" virt="non-virtual"><scope>telegraph::local_context</scope><name>get_name</name></member>
      <member refid="classtelegraph_1_1local__context_1a71a19090a93c3193615e61940fba918a" prot="public" virt="virtual"><scope>telegraph::local_context</scope><name>get_namespace</name></member>
      <member refid="classtelegraph_1_1local__context_1aba1ff115df4b54bae75ea41580ba32b5" prot="public" virt="virtual"><scope>telegraph::local_context</scope><name>get_namespace</name></member>
      <member refid="classtelegraph_1_1context_1ab8f2cf6a295d840f8011ff1b5533a1f8" prot="public" virt="non-virtual"><scope>telegraph::local_context</scope><name>get_params</name></member>
      <member refid="classtelegraph_1_1context_1a07d07a63d22454c2dc900c5cf749ce18" prot="public" virt="non-virtual"><scope>telegraph::local_context</scope><name>get_type</name></member>
      <member refid="classtelegraph_1_1context_1adfc55d7a2ba9d68c1f52abcbac7d74fd" prot="public" virt="non-virtual"><scope>telegraph::local_context</scope><name>get_uuid</name></member>
      <member refid="classtelegraph_1_1context_1a5053f72fe2b58e264a0ce00de2727953" prot="protected" virt="non-virtual"><scope>telegraph::local_context</scope><name>headless_</name></member>
      <member refid="classtelegraph_1_1context_1a51949d83373c67e0c9e1050127df30c1" prot="protected" virt="non-virtual"><scope>telegraph::local_context</scope><name>ioc_</name></member>
      <member refid="classtelegraph_1_1context_1a4cfaa125584e2f5ee5121c074bc024f1" prot="public" virt="non-virtual"><scope>telegraph::local_context</scope><name>is_headless</name></member>
      <member refid="classtelegraph_1_1local__context_1a2f6fe87993dd07754131c5248c98c11d" prot="public" virt="non-virtual"><scope>telegraph::local_context</scope><name>local_context</name></member>
      <member refid="classtelegraph_1_1context_1a19b7cc6a4c3cf53d79e07fc78573fc31" prot="protected" virt="non-virtual"><scope>telegraph::local_context</scope><name>name_</name></member>
      <member refid="classtelegraph_1_1local__context_1a4ad057dd5bede6236b3af44a18577831" prot="protected" virt="non-virtual"><scope>telegraph::local_context</scope><name>ns_</name></member>
      <member refid="classtelegraph_1_1context_1aa80ae462af488940258d71ccb6435b33" prot="protected" virt="non-virtual"><scope>telegraph::local_context</scope><name>params_</name></member>
      <member refid="classtelegraph_1_1context_1a301114c9b73194507ae58221566a3e57" prot="public" virt="pure-virtual"><scope>telegraph::local_context</scope><name>query_data</name></member>
      <member refid="classtelegraph_1_1context_1a34793623d2a2def580ad0b8710c74c6d" prot="public" virt="pure-virtual"><scope>telegraph::local_context</scope><name>query_data</name></member>
      <member refid="classtelegraph_1_1local__context_1ab64632b088982a5f994708db99690f4f" prot="public" virt="non-virtual"><scope>telegraph::local_context</scope><name>reg</name></member>
      <member refid="classtelegraph_1_1context_1a6765d7fa22fe99b9a6723c511396b781" prot="public" virt="pure-virtual"><scope>telegraph::local_context</scope><name>request</name></member>
      <member refid="classtelegraph_1_1context_1a8db167973f187f707a4108e112683969" prot="public" virt="pure-virtual"><scope>telegraph::local_context</scope><name>subscribe</name></member>
      <member refid="classtelegraph_1_1context_1aec3b3b0d7210a86f2ea2f5067ef8e922" prot="public" virt="pure-virtual"><scope>telegraph::local_context</scope><name>subscribe</name></member>
      <member refid="classtelegraph_1_1local__context_1a16ab8680bd633b8b8554960bb8c48498" prot="protected" virt="non-virtual"><scope>telegraph::local_context</scope><name>tree_</name></member>
      <member refid="classtelegraph_1_1context_1af1cab34ed3278340157e25d828bb6c77" prot="protected" virt="non-virtual"><scope>telegraph::local_context</scope><name>type_</name></member>
      <member refid="classtelegraph_1_1context_1a0bf1873b5a611776d48b3e854e9e3589" prot="protected" virt="non-virtual"><scope>telegraph::local_context</scope><name>uuid_</name></member>
      <member refid="classtelegraph_1_1context_1a6067b9a6f2590733c81f6a3b2ed9cba7" prot="public" virt="pure-virtual"><scope>telegraph::local_context</scope><name>write_data</name></member>
      <member refid="classtelegraph_1_1context_1a1f600d6159df21dd2750b1c706ca3412" prot="public" virt="pure-virtual"><scope>telegraph::local_context</scope><name>write_data</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
