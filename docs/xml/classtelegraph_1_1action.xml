<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtelegraph_1_1action" kind="class" language="C++" prot="public">
    <compoundname>telegraph::action</compoundname>
    <basecompoundref refid="classtelegraph_1_1node" prot="public" virt="non-virtual">telegraph::node</basecompoundref>
    <includes refid="lib_2telegraph_2common_2nodes_8hpp" local="no">nodes.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtelegraph_1_1action_1abc28701ae211d6124a68202a57dcfd9c" prot="private" static="no" mutable="no">
        <type><ref refid="classtelegraph_1_1value__type" kindref="compound">value_type</ref></type>
        <definition>value_type telegraph::action::arg_type_</definition>
        <argsstring></argsstring>
        <name>arg_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="292" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtelegraph_1_1action_1a7da2879da087ce71c257ff869acb1f9b" prot="private" static="no" mutable="no">
        <type><ref refid="classtelegraph_1_1value__type" kindref="compound">value_type</ref></type>
        <definition>value_type telegraph::action::ret_type_</definition>
        <argsstring></argsstring>
        <name>ret_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="293" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="293" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtelegraph_1_1action_1a431cab501aaa724fc99b174804bc0024" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>telegraph::action::action</definition>
        <argsstring>(id i, const std::string_view &amp;name, const std::string_view &amp;pretty, const std::string_view &amp;desc, const value_type &amp;arg_type, const value_type &amp;ret_type)</argsstring>
        <name>action</name>
        <param>
          <type><ref refid="classtelegraph_1_1node_1a90bc576d668ed141d5354a06aa9c8d9a" kindref="member">id</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>pretty</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1value__type" kindref="compound">value_type</ref> &amp;</type>
          <declname>arg_type</declname>
        </param>
        <param>
          <type>const <ref refid="classtelegraph_1_1value__type" kindref="compound">value_type</ref> &amp;</type>
          <declname>ret_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="270" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="270" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1action_1a691a43a3b20d6a210dffc0f2228b8114" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>telegraph::action::action</definition>
        <argsstring>(const action &amp;a)</argsstring>
        <name>action</name>
        <param>
          <type>const <ref refid="classtelegraph_1_1action" kindref="compound">action</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="275" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1action_1a5d2e7bef5432f1246912f07296dfb4f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtelegraph_1_1value__type" kindref="compound">value_type</ref> &amp;</type>
        <definition>const value_type&amp; telegraph::action::get_arg_type</definition>
        <argsstring>() const</argsstring>
        <name>get_arg_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="278" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1action_1a3d587001f7779581717b26b91564a5d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtelegraph_1_1value__type" kindref="compound">value_type</ref> &amp;</type>
        <definition>const value_type&amp; telegraph::action::get_ret_type</definition>
        <argsstring>() const</argsstring>
        <name>get_ret_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="279" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1action_1a372bd4f9c1b7b4698e151448d5c28af9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool telegraph::action::compatible_with</definition>
        <argsstring>(node *other) const override</argsstring>
        <name>compatible_with</name>
        <reimplements refid="classtelegraph_1_1node_1a68c4aed1434da1f0ece9089ff99ffcdb">compatible_with</reimplements>
        <param>
          <type><ref refid="classtelegraph_1_1node" kindref="compound">node</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="281" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="132" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1action_1ab8b73ef00465e76e016c7f44923d4036" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void telegraph::action::pack</definition>
        <argsstring>(Action *proto) const</argsstring>
        <name>pack</name>
        <param>
          <type>Action *</type>
          <declname>proto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="283" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="141" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1action_1a849370efc692c6c4e7047e3b9c50983c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void telegraph::action::pack</definition>
        <argsstring>(Node *proto) const override</argsstring>
        <name>pack</name>
        <reimplements refid="classtelegraph_1_1node_1a5006b21e9b83ecd52f3f953a1b828773">pack</reimplements>
        <param>
          <type>Node *</type>
          <declname>proto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="284" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classtelegraph_1_1action_1aa72bffae4f241be8a4366e3c7344a17b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classtelegraph_1_1node" kindref="compound">node</ref> &gt;</type>
        <definition>std::unique_ptr&lt;node&gt; telegraph::action::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classtelegraph_1_1node_1ae90515f4573cfa43c168cba9d542df6b">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="287" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="287" bodyend="289"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtelegraph_1_1action_1a3eeafc85f20bfe616d7d9ea903d24267" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtelegraph_1_1action" kindref="compound">action</ref> *</type>
        <definition>action * telegraph::action::unpack</definition>
        <argsstring>(const Action &amp;proto)</argsstring>
        <name>unpack</name>
        <param>
          <type>const Action &amp;</type>
          <declname>proto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="285" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="156" bodyend="161"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtelegraph_1_1action_1a15007857dfc5f7d455f227c14be7a5a2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void telegraph::action::print</definition>
        <argsstring>(std::ostream &amp;o, int ident=0) const override</argsstring>
        <name>print</name>
        <reimplements refid="classtelegraph_1_1node_1a70ae6b3d07132abcc4022a7ac9facf6b">print</reimplements>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ident</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/telegraph/common/nodes.hpp" line="291" column="1" bodyfile="lib/telegraph/common/nodes.cpp" bodystart="164" bodyend="168"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="9">
        <label>telegraph::action</label>
        <link refid="classtelegraph_1_1action"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>telegraph::node</label>
        <link refid="classtelegraph_1_1node"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>telegraph::action</label>
        <link refid="classtelegraph_1_1action"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>telegraph::node</label>
        <link refid="classtelegraph_1_1node"/>
        <childnode refid="13" relation="usage">
          <edgelabel>parent_</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>telegraph::group</label>
        <link refid="classtelegraph_1_1group"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="lib/telegraph/common/nodes.hpp" line="268" column="1" bodyfile="lib/telegraph/common/nodes.hpp" bodystart="268" bodyend="294"/>
    <listofallmembers>
      <member refid="classtelegraph_1_1action_1a431cab501aaa724fc99b174804bc0024" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>action</name></member>
      <member refid="classtelegraph_1_1action_1a691a43a3b20d6a210dffc0f2228b8114" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>action</name></member>
      <member refid="classtelegraph_1_1action_1abc28701ae211d6124a68202a57dcfd9c" prot="private" virt="non-virtual"><scope>telegraph::action</scope><name>arg_type_</name></member>
      <member refid="classtelegraph_1_1action_1aa72bffae4f241be8a4366e3c7344a17b" prot="public" virt="virtual"><scope>telegraph::action</scope><name>clone</name></member>
      <member refid="classtelegraph_1_1action_1a372bd4f9c1b7b4698e151448d5c28af9" prot="public" virt="virtual"><scope>telegraph::action</scope><name>compatible_with</name></member>
      <member refid="classtelegraph_1_1node_1ade724e97cdd76b83c5de499b62f91ecb" prot="protected" virt="non-virtual"><scope>telegraph::action</scope><name>desc_</name></member>
      <member refid="classtelegraph_1_1node_1a2d5ea5366a04f3b3841de9bc21e70416" prot="public" virt="virtual"><scope>telegraph::action</scope><name>from_path</name></member>
      <member refid="classtelegraph_1_1node_1aaba33e2aa28a99dcd8f4b1888c3a5706" prot="public" virt="virtual"><scope>telegraph::action</scope><name>from_path</name></member>
      <member refid="classtelegraph_1_1action_1a5d2e7bef5432f1246912f07296dfb4f1" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>get_arg_type</name></member>
      <member refid="classtelegraph_1_1node_1aff9478f841f7f791af1cd60513877440" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>get_desc</name></member>
      <member refid="classtelegraph_1_1node_1a8067bd46e650371084576234acfb8289" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>get_id</name></member>
      <member refid="classtelegraph_1_1node_1af33c56a0a2d2340c9cae412017a4fa4f" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>get_name</name></member>
      <member refid="classtelegraph_1_1node_1a2bcd9175c2e3b667422d86fc6fcc9959" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>get_parent</name></member>
      <member refid="classtelegraph_1_1node_1adb0c016733fe55621b061d4e81d296fa" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>get_parent</name></member>
      <member refid="classtelegraph_1_1node_1abeaa41162d9369bc6fc8bcbabe9d23e3" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>get_pretty</name></member>
      <member refid="classtelegraph_1_1action_1a3d587001f7779581717b26b91564a5d8" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>get_ret_type</name></member>
      <member refid="classtelegraph_1_1node_1a90bc576d668ed141d5354a06aa9c8d9a" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>id</name></member>
      <member refid="classtelegraph_1_1node_1abbc7178e6f854f475ac04fab89afe8ed" prot="protected" virt="non-virtual"><scope>telegraph::action</scope><name>id_</name></member>
      <member refid="classtelegraph_1_1node_1a14e3a8896e5cda1ad3e91186009e4a83" prot="protected" virt="non-virtual"><scope>telegraph::action</scope><name>name_</name></member>
      <member refid="classtelegraph_1_1node_1a6891eb034aa7d988f1459d3ed2bc0106" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>node</name></member>
      <member refid="classtelegraph_1_1node_1a76746ee2232620309c5f60ca94af24ee" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>node</name></member>
      <member refid="classtelegraph_1_1node_1a14eb2051c1efaf4de6684d3e50aebeb7" prot="public" virt="virtual"><scope>telegraph::action</scope><name>nodes</name></member>
      <member refid="classtelegraph_1_1node_1a9d19888a9a73a4623dcab55be6386395" prot="public" virt="virtual"><scope>telegraph::action</scope><name>nodes</name></member>
      <member refid="classtelegraph_1_1node_1aa7aacc23330b9b8f98b05f8155481de7" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>operator=</name></member>
      <member refid="classtelegraph_1_1node_1ad82c9a9af7b7cf132db1c1e74f09254f" prot="public" virt="virtual"><scope>telegraph::action</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1node_1a4a2a451694b0a4b2c4ec26eee02e46ad" prot="public" virt="virtual"><scope>telegraph::action</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1node_1a3cf657c57fe639f6288f2acdd9b50e3c" prot="public" virt="virtual"><scope>telegraph::action</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1node_1aad6b0bbccc9831f82117a1cc03493f6c" prot="public" virt="virtual"><scope>telegraph::action</scope><name>operator[]</name></member>
      <member refid="classtelegraph_1_1node_1a5419854e28d2b852ecaf964849220f9f" prot="protected" virt="non-virtual"><scope>telegraph::action</scope><name>owner_</name></member>
      <member refid="classtelegraph_1_1action_1ab8b73ef00465e76e016c7f44923d4036" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>pack</name></member>
      <member refid="classtelegraph_1_1action_1a849370efc692c6c4e7047e3b9c50983c" prot="public" virt="virtual"><scope>telegraph::action</scope><name>pack</name></member>
      <member refid="classtelegraph_1_1node_1a875057ad03af20786456cffe6d5b22d9" prot="protected" virt="non-virtual"><scope>telegraph::action</scope><name>parent_</name></member>
      <member refid="classtelegraph_1_1node_1a1f1a005517baad53ec2407c27a13c9c4" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>path</name></member>
      <member refid="classtelegraph_1_1node_1a6d308459f7de904b54a1a551b3be5cb7" prot="protected" virt="non-virtual"><scope>telegraph::action</scope><name>pretty_</name></member>
      <member refid="classtelegraph_1_1action_1a15007857dfc5f7d455f227c14be7a5a2" prot="private" virt="virtual"><scope>telegraph::action</scope><name>print</name></member>
      <member refid="classtelegraph_1_1action_1a7da2879da087ce71c257ff869acb1f9b" prot="private" virt="non-virtual"><scope>telegraph::action</scope><name>ret_type_</name></member>
      <member refid="classtelegraph_1_1node_1a6d864584bfadd3520194066f8b62812b" prot="public" virt="virtual"><scope>telegraph::action</scope><name>set_owner</name></member>
      <member refid="classtelegraph_1_1node_1ae0f1bd6f97ea3e1f21940a7eebb70fab" prot="protected" virt="non-virtual"><scope>telegraph::action</scope><name>set_parent</name></member>
      <member refid="classtelegraph_1_1node_1ac0bbcb9d810a2cca87b120301c0972a0" prot="public" virt="virtual"><scope>telegraph::action</scope><name>set_unowned</name></member>
      <member refid="classtelegraph_1_1node_1a3cb6dfaddab4d5953c04bb5ec348763b" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>topic</name></member>
      <member refid="classtelegraph_1_1action_1a3eeafc85f20bfe616d7d9ea903d24267" prot="public" virt="non-virtual"><scope>telegraph::action</scope><name>unpack</name></member>
      <member refid="classtelegraph_1_1node_1a2a2ddaf1b7210b1e69f63adcc1d83fa5" prot="public" virt="non-virtual" ambiguityscope="telegraph::node::"><scope>telegraph::action</scope><name>unpack</name></member>
      <member refid="classtelegraph_1_1node_1a7fe858c56729feae1e92625ff4827209" prot="public" virt="virtual"><scope>telegraph::action</scope><name>~node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
